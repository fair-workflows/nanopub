{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to nanopub\u2019s documentation! The nanopub library provides a high-level, user-friendly python interface for searching, publishing and retracting nanopublications. Nanopublications are a formalized and machine-readable way of communicating the smallest possible units of publishable information. See the What are Nanopublications? page for more information. \ud83d\udce6\ufe0f Setup Install using pip: pip install nanopub To publish to the nanopub server you need to setup your profile, this allows the nanopub server to identify you. To check if your profile is properly set, run np profile in your terminal. If it is not set yet, run the following interactive command to setup your profile: np setup This will add and store RSA keys to sign your nanopublications, publish a nanopublication with your name and ORCID iD to declare that you are using using these RSA keys, and store your ORCID iD to automatically add as author to the provenance of any nanopublication you will publish using this library. \u26a1\ufe0f Quick Start Publishing nanopublications Use load_profile() to load the user profile from $HOME/.nanopub , and use_test_server to point to the test server (remove it to publish to the nanopublication network) import rdflib from nanopub import Nanopub , NanopubConf , load_profile # 1. Create the config np_conf = NanopubConf ( profile = load_profile (), use_test_server = True , add_prov_generated_time = True , attribute_publication_to_profile = True , ) # 2. Construct a desired assertion (a graph of RDF triples) using rdflib my_assertion = rdflib . Graph () my_assertion . add (( rdflib . URIRef ( 'www.example.org/timbernerslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) # 3. Make a Nanopub object with this assertion np = Nanopub ( conf = np_conf , assertion = my_assertion ) # 4. Publish the Nanopub object np . publish () print ( np ) You can also just sign the nanopub with np.sign() . Upon signing, or publishing, the np object will be automatically updated with the signed RDF and generated trusty URI. Searching for nanopublications from nanopub import NanopubClient # Create the client client = NanopubClient () # Search for all nanopublications containing the text 'fair' results = client . find_nanopubs_with_text ( 'fair' ) for result in results : print ( result ) Fetching nanopublications and inspecting them from nanopub import NanopubClient # Create the client client = NanopubClient () # Fetch the nanopublication at the specified URI np = client . fetch ( 'http://purl.org/np/RApJG4fwj0szOMBMiYGmYvd5MCtRle6VbwkMJUb1SxxDM' ) print ( np ) # Iterate through all triples in the assertion graph for s , p , o in np . assertion : print ( s , p , o )","title":"Getting started"},{"location":"#welcome-to-nanopubs-documentation","text":"The nanopub library provides a high-level, user-friendly python interface for searching, publishing and retracting nanopublications. Nanopublications are a formalized and machine-readable way of communicating the smallest possible units of publishable information. See the What are Nanopublications? page for more information.","title":"Welcome to nanopub's documentation!"},{"location":"#setup","text":"Install using pip: pip install nanopub To publish to the nanopub server you need to setup your profile, this allows the nanopub server to identify you. To check if your profile is properly set, run np profile in your terminal. If it is not set yet, run the following interactive command to setup your profile: np setup This will add and store RSA keys to sign your nanopublications, publish a nanopublication with your name and ORCID iD to declare that you are using using these RSA keys, and store your ORCID iD to automatically add as author to the provenance of any nanopublication you will publish using this library.","title":"\ud83d\udce6\ufe0f Setup"},{"location":"#quick-start","text":"","title":"\u26a1\ufe0f Quick Start"},{"location":"#publishing-nanopublications","text":"Use load_profile() to load the user profile from $HOME/.nanopub , and use_test_server to point to the test server (remove it to publish to the nanopublication network) import rdflib from nanopub import Nanopub , NanopubConf , load_profile # 1. Create the config np_conf = NanopubConf ( profile = load_profile (), use_test_server = True , add_prov_generated_time = True , attribute_publication_to_profile = True , ) # 2. Construct a desired assertion (a graph of RDF triples) using rdflib my_assertion = rdflib . Graph () my_assertion . add (( rdflib . URIRef ( 'www.example.org/timbernerslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) # 3. Make a Nanopub object with this assertion np = Nanopub ( conf = np_conf , assertion = my_assertion ) # 4. Publish the Nanopub object np . publish () print ( np ) You can also just sign the nanopub with np.sign() . Upon signing, or publishing, the np object will be automatically updated with the signed RDF and generated trusty URI.","title":"Publishing nanopublications"},{"location":"#searching-for-nanopublications","text":"from nanopub import NanopubClient # Create the client client = NanopubClient () # Search for all nanopublications containing the text 'fair' results = client . find_nanopubs_with_text ( 'fair' ) for result in results : print ( result )","title":"Searching for nanopublications"},{"location":"#fetching-nanopublications-and-inspecting-them","text":"from nanopub import NanopubClient # Create the client client = NanopubClient () # Fetch the nanopublication at the specified URI np = client . fetch ( 'http://purl.org/np/RApJG4fwj0szOMBMiYGmYvd5MCtRle6VbwkMJUb1SxxDM' ) print ( np ) # Iterate through all triples in the assertion graph for s , p , o in np . assertion : print ( s , p , o )","title":"Fetching nanopublications and inspecting them"},{"location":"getting-started/development/","text":"\ud83d\udce5 Install for development Clone the repository and go in the project folder: git clone https://github.com/fair-workflows/nanopub cd nanopub To install the project for development you can either use venv to create a virtual environment yourself, or use hatch to automatically handle virtual environments for you. venv hatch Create the virtual environment in the project folder : python3 -m venv .venv Activate the virtual environment: source .venv/bin/activate Install all dependencies required for development: pip install -e \".[dev,doc,test]\" Install pre-commit to enable automated formatting and linting of the code at each commit: pre-commit install Install Hatch , this will automatically handle virtual environments and make sure all dependencies are installed when you run a script in the project: pip install hatch Optionally you can improve hatch terminal completion See the official documentation for more details. For ZSH you can run these commands: _HATCH_COMPLETE = zsh_source hatch > ~/.hatch-complete.zsh echo \". ~/.hatch-complete.zsh\" >> ~/.zshrc \ud83e\uddd1\u200d\ud83d\udcbb Development workflow venv hatch Try to sign a nanopublication with the code defined in scripts/dev.py to test your changes: ./scripts/dev.sh The code will be automatically formatted when you commit your changes using pre-commit . But you can also run the script to format the code yourself: ./scripts/format.sh Check the code for errors, and if it is in accordance with the PEP8 style guide, by running flake8 and mypy : ./scripts/lint.sh Try to sign a nanopublication with the code defined in scripts/dev.py to test your changes: hatch run dev The code will be automatically formatted when you commit your changes using pre-commit . But you can also run the script to format the code yourself: hatch run format Check the code for errors, and if it is in accordance with the PEP8 style guide, by running flake8 and mypy : hatch run lint \u2705 Run the tests Tests are automatically run by a GitHub Actions workflow when new code is pushed to the GitHub repository. The tests use the nanopub-java tool for validating the signing process implemented in python produces similar nanopublications. This is automatically installed by the library, just make sure java is available where you run the tests. venv hatch Run the tests locally: ./scripts/test.sh You can also run only a specific test: ./scripts/test.sh tests/test_nanopub.py::test_nanopub_sign_uri Run the tests locally: hatch run test You can also run only a specific test: hatch run test tests/test_nanopub.py::test_nanopub_sign_uri \ud83d\udcd6 Generate docs The documentation (this website) is automatically generated from the markdown files in the docs folder and python docstring comments, and published by a GitHub Actions workflow. Serve the docs on http://localhost:8008 venv hatch ./scripts/docs.sh hatch run docs \ud83c\udff7\ufe0f Publish a new release Increment the __version__ in nanopub/_version.py Push to GitHub Create a new release on GitHub A GitHub Action workflow will automatically publish the new version to PyPI","title":"Development"},{"location":"getting-started/development/#install-for-development","text":"Clone the repository and go in the project folder: git clone https://github.com/fair-workflows/nanopub cd nanopub To install the project for development you can either use venv to create a virtual environment yourself, or use hatch to automatically handle virtual environments for you. venv hatch Create the virtual environment in the project folder : python3 -m venv .venv Activate the virtual environment: source .venv/bin/activate Install all dependencies required for development: pip install -e \".[dev,doc,test]\" Install pre-commit to enable automated formatting and linting of the code at each commit: pre-commit install Install Hatch , this will automatically handle virtual environments and make sure all dependencies are installed when you run a script in the project: pip install hatch Optionally you can improve hatch terminal completion See the official documentation for more details. For ZSH you can run these commands: _HATCH_COMPLETE = zsh_source hatch > ~/.hatch-complete.zsh echo \". ~/.hatch-complete.zsh\" >> ~/.zshrc","title":"\ud83d\udce5 Install for development"},{"location":"getting-started/development/#development-workflow","text":"venv hatch Try to sign a nanopublication with the code defined in scripts/dev.py to test your changes: ./scripts/dev.sh The code will be automatically formatted when you commit your changes using pre-commit . But you can also run the script to format the code yourself: ./scripts/format.sh Check the code for errors, and if it is in accordance with the PEP8 style guide, by running flake8 and mypy : ./scripts/lint.sh Try to sign a nanopublication with the code defined in scripts/dev.py to test your changes: hatch run dev The code will be automatically formatted when you commit your changes using pre-commit . But you can also run the script to format the code yourself: hatch run format Check the code for errors, and if it is in accordance with the PEP8 style guide, by running flake8 and mypy : hatch run lint","title":"\ud83e\uddd1\u200d\ud83d\udcbb Development workflow"},{"location":"getting-started/development/#run-the-tests","text":"Tests are automatically run by a GitHub Actions workflow when new code is pushed to the GitHub repository. The tests use the nanopub-java tool for validating the signing process implemented in python produces similar nanopublications. This is automatically installed by the library, just make sure java is available where you run the tests. venv hatch Run the tests locally: ./scripts/test.sh You can also run only a specific test: ./scripts/test.sh tests/test_nanopub.py::test_nanopub_sign_uri Run the tests locally: hatch run test You can also run only a specific test: hatch run test tests/test_nanopub.py::test_nanopub_sign_uri","title":"\u2705 Run the tests"},{"location":"getting-started/development/#generate-docs","text":"The documentation (this website) is automatically generated from the markdown files in the docs folder and python docstring comments, and published by a GitHub Actions workflow. Serve the docs on http://localhost:8008 venv hatch ./scripts/docs.sh hatch run docs","title":"\ud83d\udcd6 Generate docs"},{"location":"getting-started/development/#publish-a-new-release","text":"Increment the __version__ in nanopub/_version.py Push to GitHub Create a new release on GitHub A GitHub Action workflow will automatically publish the new version to PyPI","title":"\ud83c\udff7\ufe0f Publish a new release"},{"location":"getting-started/setup/","text":"Setup instructions \ud83d\udce5\ufe0f Install the nanopub library Install using pip: pip install nanopub \ud83d\udc0d Setup for users new to python We recommend using anaconda to install python and manage python dependencies \ud83d\udc64 Setup your profile To publish to the nanopub server you need to setup your profile (note that you can use fetch and search functionality without a profile). This allows the nanopub server to identify you. To check if your profile is properly set, run the following command in your terminal: np profile To setup your profile, run the following interactive command: np setup This will setup the following: Stored profile A local version of the profile will be stored in the nanopub user config dir (by default HOMEDIR/.nanopub/profile.yml ) RSA keys It will add and store RSA keys to sign your nanopublications. By default they are stored under HOMEDIR/.nanopub/id_rsa and HOMEDIR/.nanopub/id_rsa.pub . ORCID iD This includes your ORCID iD (i.e. https://orcid.org/0000-0000-0000-0000). If you don\u2019t have an ORCID iD yet, you need to register . We use the ORCID iD to automatically add as author to the provenance of any nanopublication you will publish using this library. Introductory nanopublication We encourage you to make use of np setup \u2018s option to publish your profile to the nanopub servers. This links your ORCID iD to your RSA key, thereby making all your publications linkable to you. Here is an example introductory nanopublicaiton . The link to this nanopublication is also stored in your profile. \u2611\ufe0f Check your profile You can check the profile currently used by default by running this command in your terminal: np profile","title":"Setup instructions"},{"location":"getting-started/setup/#setup-instructions","text":"","title":"Setup instructions"},{"location":"getting-started/setup/#install-the-nanopub-library","text":"Install using pip: pip install nanopub","title":"\ud83d\udce5\ufe0f Install the nanopub library"},{"location":"getting-started/setup/#setup-for-users-new-to-python","text":"We recommend using anaconda to install python and manage python dependencies","title":"\ud83d\udc0d Setup for users new to python"},{"location":"getting-started/setup/#setup-your-profile","text":"To publish to the nanopub server you need to setup your profile (note that you can use fetch and search functionality without a profile). This allows the nanopub server to identify you. To check if your profile is properly set, run the following command in your terminal: np profile To setup your profile, run the following interactive command: np setup This will setup the following:","title":"\ud83d\udc64 Setup your profile"},{"location":"getting-started/setup/#stored-profile","text":"A local version of the profile will be stored in the nanopub user config dir (by default HOMEDIR/.nanopub/profile.yml )","title":"Stored profile"},{"location":"getting-started/setup/#rsa-keys","text":"It will add and store RSA keys to sign your nanopublications. By default they are stored under HOMEDIR/.nanopub/id_rsa and HOMEDIR/.nanopub/id_rsa.pub .","title":"RSA keys"},{"location":"getting-started/setup/#orcid-id","text":"This includes your ORCID iD (i.e. https://orcid.org/0000-0000-0000-0000). If you don\u2019t have an ORCID iD yet, you need to register . We use the ORCID iD to automatically add as author to the provenance of any nanopublication you will publish using this library.","title":"ORCID iD"},{"location":"getting-started/setup/#introductory-nanopublication","text":"We encourage you to make use of np setup \u2018s option to publish your profile to the nanopub servers. This links your ORCID iD to your RSA key, thereby making all your publications linkable to you. Here is an example introductory nanopublicaiton . The link to this nanopublication is also stored in your profile.","title":"Introductory nanopublication"},{"location":"getting-started/setup/#check-your-profile","text":"You can check the profile currently used by default by running this command in your terminal: np profile","title":"\u2611\ufe0f Check your profile"},{"location":"getting-started/test-server/","text":"The nanopub test server Throughout this documentation we make use of the nanopub test server by setting use_test_server=True when instantiating NanopubConf or NanopubClient : from nanopub import NanopubClient , NanopubConf client = NanopubClient ( use_test_server = True ) np_conf = NanopubConf ( use_test_server = True ) This will search and fetch from, and publish to the nanopub test server . When learning about nanopub using the testserver is a good idea, because: * You are free to experiment with publishing without polluting the production server. * You can draft a publication and know exactly what it will look like on the nanopub server without polluting the production server. * When searching (and to a lesser extent fetching) you are not putting an unnecessary load on the production server. Test purl URIs do not point to the test server There is one caveat when using the test server that can be confusing: The purl URI (for example: http://purl.org/np/RA71u9tYPd7ZQifE_6hXjqVim6pkweuvjoi-8ehvLvzg8 ) points to the nanopub production server resulting in a 404 page not found error. A manual workaround is: 1. Open http://purl.org/np/RA71u9tYPd7ZQifE_6hXjqVim6pkweuvjoi-8ehvLvzg8 in your browser 2. Notice that the URL changed to http://server.nanopubs.lod.labs.vu.nl/RA71u9tYPd7ZQifE_6hXjqVim6pkweuvjoi-8ehvLvzg8 . 3. Replace \u2018server\u2019 with \u2018test-server\u2019: http://test-server.nanopubs.lod.labs.vu.nl/RA71u9tYPd7ZQifE_6hXjqVim6pkweuvjoi-8ehvLvzg8 . NB : NanopubClient.fetch() does this for you if use_test_server=True .","title":"The nanopub test server"},{"location":"getting-started/test-server/#the-nanopub-test-server","text":"Throughout this documentation we make use of the nanopub test server by setting use_test_server=True when instantiating NanopubConf or NanopubClient : from nanopub import NanopubClient , NanopubConf client = NanopubClient ( use_test_server = True ) np_conf = NanopubConf ( use_test_server = True ) This will search and fetch from, and publish to the nanopub test server . When learning about nanopub using the testserver is a good idea, because: * You are free to experiment with publishing without polluting the production server. * You can draft a publication and know exactly what it will look like on the nanopub server without polluting the production server. * When searching (and to a lesser extent fetching) you are not putting an unnecessary load on the production server.","title":"The nanopub test server"},{"location":"getting-started/test-server/#test-purl-uris-do-not-point-to-the-test-server","text":"There is one caveat when using the test server that can be confusing: The purl URI (for example: http://purl.org/np/RA71u9tYPd7ZQifE_6hXjqVim6pkweuvjoi-8ehvLvzg8 ) points to the nanopub production server resulting in a 404 page not found error. A manual workaround is: 1. Open http://purl.org/np/RA71u9tYPd7ZQifE_6hXjqVim6pkweuvjoi-8ehvLvzg8 in your browser 2. Notice that the URL changed to http://server.nanopubs.lod.labs.vu.nl/RA71u9tYPd7ZQifE_6hXjqVim6pkweuvjoi-8ehvLvzg8 . 3. Replace \u2018server\u2019 with \u2018test-server\u2019: http://test-server.nanopubs.lod.labs.vu.nl/RA71u9tYPd7ZQifE_6hXjqVim6pkweuvjoi-8ehvLvzg8 . NB : NanopubClient.fetch() does this for you if use_test_server=True .","title":"Test purl URIs do not point to the test server"},{"location":"getting-started/use-the-cli/","text":"Use the command line interface Once installed, you can use the nanopub library through the np command line interface to sign and publish Nanopublication. \ud83d\udc64 Check the current user profile np profile \u270d\ufe0f Set your user profile See the setup instructions page for more details about setting up your profile. np setup \u2712\ufe0f Sign nanopubs Sign a nanopublication from a file, this will generate the signed nanopub in a new file signed.nanopub.trig alongside the original: np sign nanopub.trig \ud83d\udcec\ufe0f Publish nanopubs Publish a nanopublication from a signed file: np publish signed.nanopub.trig Or directly publish a nanopublication from an unsigned file: np publish nanopub.trig You can also publish to the test server: np publish nanopub.trig --test \u2611\ufe0f Check signed nanopubs Check if a signed nanopublication is valid: np check signed.nanopub.trig \u2139\ufe0f Get help Display the help for the different commands with the --help flag. np --help np sign --help","title":"Use the command line interface"},{"location":"getting-started/use-the-cli/#use-the-command-line-interface","text":"Once installed, you can use the nanopub library through the np command line interface to sign and publish Nanopublication.","title":"Use the command line interface"},{"location":"getting-started/use-the-cli/#check-the-current-user-profile","text":"np profile","title":"\ud83d\udc64 Check the current user profile"},{"location":"getting-started/use-the-cli/#set-your-user-profile","text":"See the setup instructions page for more details about setting up your profile. np setup","title":"\u270d\ufe0f Set your user profile"},{"location":"getting-started/use-the-cli/#sign-nanopubs","text":"Sign a nanopublication from a file, this will generate the signed nanopub in a new file signed.nanopub.trig alongside the original: np sign nanopub.trig","title":"\u2712\ufe0f Sign nanopubs"},{"location":"getting-started/use-the-cli/#publish-nanopubs","text":"Publish a nanopublication from a signed file: np publish signed.nanopub.trig Or directly publish a nanopublication from an unsigned file: np publish nanopub.trig You can also publish to the test server: np publish nanopub.trig --test","title":"\ud83d\udcec\ufe0f Publish nanopubs"},{"location":"getting-started/use-the-cli/#check-signed-nanopubs","text":"Check if a signed nanopublication is valid: np check signed.nanopub.trig","title":"\u2611\ufe0f Check signed nanopubs"},{"location":"getting-started/use-the-cli/#i-get-help","text":"Display the help for the different commands with the --help flag. np --help np sign --help","title":"\u2139\ufe0f Get help"},{"location":"getting-started/what-are-nanopubs/","text":"What are nanopublications? Nanopublications are a formalized and machine-readable way of communicating the smallest possible units of publishable information. This could be, for example, the outcome of a scientific study or a claim made by a particular scientist. Nanopublications are searchable, citable, and contain authorship and attribution information. The aim is to encourage individual scientific results to be released in a traceable and interoperable format. As such, nanopublications are an effective FAIR means of communicating scientific claims and results. Read more about nanopublications at nanopub.org . Different elements of a nanopublication From nanopub.org documentation (2020/12/02) As can be seen in this image, a nanopublication has three basic elements: Assertion: The assertion is the main content of a nanopublication in the form of an small atomic unit of information Provenance: This part describes how the assertion above came to be. This can include the scientific methods that were used to generate the assertion, for example a reference to the kind of study that was performed and its parameters. Publication Info: This part contains metadata about the nanopublication as a whole, such as when and by whom it was created and the license terms for its reuse.","title":"What are Nanopublications?"},{"location":"getting-started/what-are-nanopubs/#what-are-nanopublications","text":"Nanopublications are a formalized and machine-readable way of communicating the smallest possible units of publishable information. This could be, for example, the outcome of a scientific study or a claim made by a particular scientist. Nanopublications are searchable, citable, and contain authorship and attribution information. The aim is to encourage individual scientific results to be released in a traceable and interoperable format. As such, nanopublications are an effective FAIR means of communicating scientific claims and results. Read more about nanopublications at nanopub.org .","title":"What are nanopublications?"},{"location":"getting-started/what-are-nanopubs/#different-elements-of-a-nanopublication","text":"From nanopub.org documentation (2020/12/02) As can be seen in this image, a nanopublication has three basic elements: Assertion: The assertion is the main content of a nanopublication in the form of an small atomic unit of information Provenance: This part describes how the assertion above came to be. This can include the scientific methods that were used to generate the assertion, for example a reference to the kind of study that was performed and its parameters. Publication Info: This part contains metadata about the nanopublication as a whole, such as when and by whom it was created and the license terms for its reuse.","title":"Different elements of a nanopublication"},{"location":"publishing/profile/","text":"Set the user profile Prerequisite for publishing Before you can sign and publish you should setup your profile , check if it is properly set by running np profile in your terminal. \ud83d\udc64 Use the default user profile If you have setup a profile on your machine following the setup instructions , you can easily load the default profile (defined in $HOME/.nanopub/profile.yml ): from nanopub import load_profile p = load_profile () \u270d\ufe0f Define the user profile Otherwise, if you wish to have flexibility when defining the user profile, there are multiple options: Load a profile file Provide a specific path to a profile.yml file when using the load_profile() function: from nanopub import load_profile p = load_profile ( Path ( '/path/to/profile.yml' )) Provide the keys filepaths If you need to switch between multiple keys it can be convenient to be able to define the profile directly in your code, you can do so with the Profile class: from pathlib import Path from nanopub import Profile p1 = Profile ( name = 'Your Name' , orcid_id = 'https://orcid.org/0000-0000-0000-0000' , private_key = Path . home () / \"id_rsa\" , public_key = Path . home () / \"id_rsa.pub\" ) Provide the keys as strings If you need to switch between multiple keys you can also provide the private and public keys as string, without needing to store them in files: from nanopub import Profile p = Profile ( name = 'Your Name' , orcid_id = 'https://orcid.org/0000-0000-0000-0000' , private_key = \"YOUR_PRIVATE_KEY\" , public_key = \"YOUR_PUBLIC_KEY\" ) Generate new keys for your nanopub profile If you do not provide private and public keys a new key pair will be automatically generated. You can then store it where you want. from nanopub import Profile p = Profile ( name = 'Your Name' , orcid_id = 'https://orcid.org/0000-0000-0000-0000' , ) # By default the profile and keys will be stored in $HOME/.nanopub p . store ()","title":"Set the user profile"},{"location":"publishing/profile/#set-the-user-profile","text":"Prerequisite for publishing Before you can sign and publish you should setup your profile , check if it is properly set by running np profile in your terminal.","title":"Set the user profile"},{"location":"publishing/profile/#use-the-default-user-profile","text":"If you have setup a profile on your machine following the setup instructions , you can easily load the default profile (defined in $HOME/.nanopub/profile.yml ): from nanopub import load_profile p = load_profile ()","title":"\ud83d\udc64 Use the default user profile"},{"location":"publishing/profile/#define-the-user-profile","text":"Otherwise, if you wish to have flexibility when defining the user profile, there are multiple options:","title":"\u270d\ufe0f Define the user profile"},{"location":"publishing/profile/#load-a-profile-file","text":"Provide a specific path to a profile.yml file when using the load_profile() function: from nanopub import load_profile p = load_profile ( Path ( '/path/to/profile.yml' ))","title":"Load a profile file"},{"location":"publishing/profile/#provide-the-keys-filepaths","text":"If you need to switch between multiple keys it can be convenient to be able to define the profile directly in your code, you can do so with the Profile class: from pathlib import Path from nanopub import Profile p1 = Profile ( name = 'Your Name' , orcid_id = 'https://orcid.org/0000-0000-0000-0000' , private_key = Path . home () / \"id_rsa\" , public_key = Path . home () / \"id_rsa.pub\" )","title":"Provide the keys filepaths"},{"location":"publishing/profile/#provide-the-keys-as-strings","text":"If you need to switch between multiple keys you can also provide the private and public keys as string, without needing to store them in files: from nanopub import Profile p = Profile ( name = 'Your Name' , orcid_id = 'https://orcid.org/0000-0000-0000-0000' , private_key = \"YOUR_PRIVATE_KEY\" , public_key = \"YOUR_PUBLIC_KEY\" )","title":"Provide the keys as strings"},{"location":"publishing/profile/#generate-new-keys-for-your-nanopub-profile","text":"If you do not provide private and public keys a new key pair will be automatically generated. You can then store it where you want. from nanopub import Profile p = Profile ( name = 'Your Name' , orcid_id = 'https://orcid.org/0000-0000-0000-0000' , ) # By default the profile and keys will be stored in $HOME/.nanopub p . store ()","title":"Generate new keys for your nanopub profile"},{"location":"publishing/publish-nanopublications/","text":"Publishing nanopublications The nanopub library provides an intuitive API that makes publishing nanopublications much easier. The rationale is that you often do not want to worry about the details of composing the RDF that is often the same in each nanopublication. Instead you should focus on the content of your nanopublication: the assertion. \ud83d\udcdc A simple recipe to publish RDF triples You can use Nanopub objects to easily publish nanopublications with your assertion (think of the assertion as the content of your nanopublication). This is a 3-step recipe that works for most cases: Create a NanopubConf Construct a desired assertion using rdflib . Make a Nanopub object from the assertion. Publish the Nanopub object using .publish() . Here is an example: import rdflib from nanopub import Nanopub , NanopubConf , load_profile # 1. Create the config (we use use_test_server=True to point to the test server) np_conf = NanopubConf ( profile = load_profile (), use_test_server = True , add_prov_generated_time = True , attribute_publication_to_profile = True , ) # 2. Construct a desired assertion (a graph of RDF triples) using RDFLib my_assertion = rdflib . Graph () my_assertion . add (( rdflib . URIRef ( 'www.example.org/timbernerslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) # 3. Make a Nanopub object with this assertion np = Nanopub ( conf = np_conf , assertion = my_assertion ) # 4. Publish the Publication object. np . publish () print ( np ) View an example of resulting nanopublication here . You can also just sign the nanopub with np.sign() . Upon signing, or publishing, the np object will be automatically updated with the signed RDF and generated trusty URI. This is the resulting assertion part of the nanopublication: @prefix sub: <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ#> . sub : assertion { <https://www.example.org/timbernerslee> a <http://xmlns.com/foaf/0.1/Person> . } The library automatically adds relevant RDF triples for the provenance part of the nanopublication: @prefix prov: <http://www.w3.org/ns/prov#> . @prefix sub: <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ#> . @prefix xsd: <http://www.w3.org/2001/XMLSchema#> . sub : provenance { sub : assertion prov : generatedAtTime \"2020-12-01T10:44:32.367084\" ^^ xsd : dateTime . } as well as for the publication info part of the nanopublication: @prefix npx: <http://purl.org/nanopub/x/> . @prefix prov: <http://www.w3.org/ns/prov#> . @prefix sub: <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ#> . @prefix this: <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ> . @prefix xsd: <http://www.w3.org/2001/XMLSchema#> . sub : pubinfo { sub : sig npx : hasAlgorithm \"RSA\" ; npx : hasPublicKey \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCmso7vmRO/Cp4Pt0RkJJkV5qfc1WFYU/jMtkdxxb5+lfIVXNV97XQnM1Tj4fkb/W6jkP6fHl8mj8Q7hl7VgUnQ6I+B7cMGpxW9Z8Br+JNx8DPMMt08VCH5+JMENPRKl91r7rF/YPWCAgL9eqXSixCNMNAj5RBmMTQoPuRkpgmt1wIDAQAB\" ; npx : hasSignature \"aPZMJ3Md6X1PHYvXJiNoRUni9+1oS9faCfiPRRCrj4K/uZPN0J/znjxGuCUxoZRJ4b4RfSxmHFGRKfCFusJX+7Y3xuxYx4GYHzYhBciK7T5pO02V4w6sdwHLKd5E+Wcl0PTr2t3lEjq6yzY98wEXlZLAbaRDBJvzpg5xORifQDw=\" ; npx : hasSignatureTarget this : . this : prov : generatedAtTime \"2020-12-01T10:44:32.367084\" ^^ xsd : dateTime ; prov : wasAttributedTo <https://orcid.org/0000-0000-0000-0000> . } \ud83d\udcc2 Publish from a file You can also easily sign and publish a Nanopublication from a file. from rdflib import ConjunctiveGraph from nanopub import Nanopub , NanopubConf , load_profile # 1. Create the config np_conf = NanopubConf ( profile = load_profile (), use_test_server = True ) # 2. Load the file in a RDFLib graph g = ConjunctiveGraph () g . parse ( \"nanopub.trig\" ) # 3. Make a Nanopublication object with this assertion np = Nanopub ( conf = np_conf , rdf = g ) # 4. Publish the Publication object. np . publish () print ( np ) \ud83d\udda8\ufe0f Display more logs You can change the log level of your logger to display more logs from the nanopub library, which can be help when debugging. import rdflib from nanopub import Nanopub , NanopubConf , load_profile # Instantiate the logger logger = logging . getLogger () logger . setLevel ( logging . INFO ) console_handler = logging . StreamHandler () formatter = logging . Formatter ( \" %(asctime)s %(levelname)s : [ %(module)s : %(funcName)s ] %(message)s \" ) console_handler . setFormatter ( formatter ) logger . addHandler ( console_handler ) # Usual workflow to publish nanopubs np_conf = NanopubConf ( profile = load_profile (), use_test_server = True , add_prov_generated_time = True , attribute_publication_to_profile = True , ) my_assertion = rdflib . Graph () my_assertion . add (( rdflib . URIRef ( 'www.example.org/timbernerslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) np = Nanopub ( conf = np_conf , assertion = my_assertion ) np . publish () print ( np ) \u2699\ufe0f Configure the nanopubs The NanopubConf class is used to create a reusable configuration for the nanopublications you create and publish. It enables you to define: which triples will be automatically added to the provenance and pubinfo graphs which user Profile to use to which server nanopubs will be published import rdflib from nanopub import Nanopub , NanopubConf , load_profile np_conf = NanopubConf ( profile = load_profile (), # Define which server must be used (will be production by default) use_test_server = True , use_server = \"http://test-server.nanopubs.lod.labs.vu.nl\" , # Add at which date and time the nanopub was generated: add_prov_generated_time = True , add_pubinfo_generated_time = True , # Attribute the assertion or publication to your profile ORCID: attribute_assertion_to_profile = True , attribute_publication_to_profile = True , # Specify that the nanopub assertion is derived from another URI # (such as an existing nanopub): derived_from = \"http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ\" ) # Usual workflow to build publish a nanopub my_assertion = rdflib . Graph () my_assertion . add (( rdflib . URIRef ( 'www.example.org/timbernerslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) np = Nanopub ( conf = np_conf , assertion = my_assertion ) np . publish () print ( np ) You can also directly provide an ORCID to attribute the publication to, instead of using the user profile: from nanopub import NanopubConf , load_profile creator_orcid = \"https://orcid.org/0000-0000-0000-0000\" np_conf = NanopubConf ( profile = load_profile (), use_test_server = True , use_server = \"http://test-server.nanopubs.lod.labs.vu.nl\" , add_prov_generated_time = True , add_pubinfo_generated_time = True , # Directly provide the ORCID: assertion_attributed_to = creator_orcid , publication_attributed_to = creator_orcid , )","title":"Publish nanopublications"},{"location":"publishing/publish-nanopublications/#publishing-nanopublications","text":"The nanopub library provides an intuitive API that makes publishing nanopublications much easier. The rationale is that you often do not want to worry about the details of composing the RDF that is often the same in each nanopublication. Instead you should focus on the content of your nanopublication: the assertion.","title":"Publishing nanopublications"},{"location":"publishing/publish-nanopublications/#a-simple-recipe-to-publish-rdf-triples","text":"You can use Nanopub objects to easily publish nanopublications with your assertion (think of the assertion as the content of your nanopublication). This is a 3-step recipe that works for most cases: Create a NanopubConf Construct a desired assertion using rdflib . Make a Nanopub object from the assertion. Publish the Nanopub object using .publish() . Here is an example: import rdflib from nanopub import Nanopub , NanopubConf , load_profile # 1. Create the config (we use use_test_server=True to point to the test server) np_conf = NanopubConf ( profile = load_profile (), use_test_server = True , add_prov_generated_time = True , attribute_publication_to_profile = True , ) # 2. Construct a desired assertion (a graph of RDF triples) using RDFLib my_assertion = rdflib . Graph () my_assertion . add (( rdflib . URIRef ( 'www.example.org/timbernerslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) # 3. Make a Nanopub object with this assertion np = Nanopub ( conf = np_conf , assertion = my_assertion ) # 4. Publish the Publication object. np . publish () print ( np ) View an example of resulting nanopublication here . You can also just sign the nanopub with np.sign() . Upon signing, or publishing, the np object will be automatically updated with the signed RDF and generated trusty URI. This is the resulting assertion part of the nanopublication: @prefix sub: <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ#> . sub : assertion { <https://www.example.org/timbernerslee> a <http://xmlns.com/foaf/0.1/Person> . } The library automatically adds relevant RDF triples for the provenance part of the nanopublication: @prefix prov: <http://www.w3.org/ns/prov#> . @prefix sub: <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ#> . @prefix xsd: <http://www.w3.org/2001/XMLSchema#> . sub : provenance { sub : assertion prov : generatedAtTime \"2020-12-01T10:44:32.367084\" ^^ xsd : dateTime . } as well as for the publication info part of the nanopublication: @prefix npx: <http://purl.org/nanopub/x/> . @prefix prov: <http://www.w3.org/ns/prov#> . @prefix sub: <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ#> . @prefix this: <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ> . @prefix xsd: <http://www.w3.org/2001/XMLSchema#> . sub : pubinfo { sub : sig npx : hasAlgorithm \"RSA\" ; npx : hasPublicKey \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCmso7vmRO/Cp4Pt0RkJJkV5qfc1WFYU/jMtkdxxb5+lfIVXNV97XQnM1Tj4fkb/W6jkP6fHl8mj8Q7hl7VgUnQ6I+B7cMGpxW9Z8Br+JNx8DPMMt08VCH5+JMENPRKl91r7rF/YPWCAgL9eqXSixCNMNAj5RBmMTQoPuRkpgmt1wIDAQAB\" ; npx : hasSignature \"aPZMJ3Md6X1PHYvXJiNoRUni9+1oS9faCfiPRRCrj4K/uZPN0J/znjxGuCUxoZRJ4b4RfSxmHFGRKfCFusJX+7Y3xuxYx4GYHzYhBciK7T5pO02V4w6sdwHLKd5E+Wcl0PTr2t3lEjq6yzY98wEXlZLAbaRDBJvzpg5xORifQDw=\" ; npx : hasSignatureTarget this : . this : prov : generatedAtTime \"2020-12-01T10:44:32.367084\" ^^ xsd : dateTime ; prov : wasAttributedTo <https://orcid.org/0000-0000-0000-0000> . }","title":"\ud83d\udcdc A simple recipe to publish RDF triples"},{"location":"publishing/publish-nanopublications/#publish-from-a-file","text":"You can also easily sign and publish a Nanopublication from a file. from rdflib import ConjunctiveGraph from nanopub import Nanopub , NanopubConf , load_profile # 1. Create the config np_conf = NanopubConf ( profile = load_profile (), use_test_server = True ) # 2. Load the file in a RDFLib graph g = ConjunctiveGraph () g . parse ( \"nanopub.trig\" ) # 3. Make a Nanopublication object with this assertion np = Nanopub ( conf = np_conf , rdf = g ) # 4. Publish the Publication object. np . publish () print ( np )","title":"\ud83d\udcc2 Publish from a file"},{"location":"publishing/publish-nanopublications/#display-more-logs","text":"You can change the log level of your logger to display more logs from the nanopub library, which can be help when debugging. import rdflib from nanopub import Nanopub , NanopubConf , load_profile # Instantiate the logger logger = logging . getLogger () logger . setLevel ( logging . INFO ) console_handler = logging . StreamHandler () formatter = logging . Formatter ( \" %(asctime)s %(levelname)s : [ %(module)s : %(funcName)s ] %(message)s \" ) console_handler . setFormatter ( formatter ) logger . addHandler ( console_handler ) # Usual workflow to publish nanopubs np_conf = NanopubConf ( profile = load_profile (), use_test_server = True , add_prov_generated_time = True , attribute_publication_to_profile = True , ) my_assertion = rdflib . Graph () my_assertion . add (( rdflib . URIRef ( 'www.example.org/timbernerslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) np = Nanopub ( conf = np_conf , assertion = my_assertion ) np . publish () print ( np )","title":"\ud83d\udda8\ufe0f Display more logs"},{"location":"publishing/publish-nanopublications/#configure-the-nanopubs","text":"The NanopubConf class is used to create a reusable configuration for the nanopublications you create and publish. It enables you to define: which triples will be automatically added to the provenance and pubinfo graphs which user Profile to use to which server nanopubs will be published import rdflib from nanopub import Nanopub , NanopubConf , load_profile np_conf = NanopubConf ( profile = load_profile (), # Define which server must be used (will be production by default) use_test_server = True , use_server = \"http://test-server.nanopubs.lod.labs.vu.nl\" , # Add at which date and time the nanopub was generated: add_prov_generated_time = True , add_pubinfo_generated_time = True , # Attribute the assertion or publication to your profile ORCID: attribute_assertion_to_profile = True , attribute_publication_to_profile = True , # Specify that the nanopub assertion is derived from another URI # (such as an existing nanopub): derived_from = \"http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ\" ) # Usual workflow to build publish a nanopub my_assertion = rdflib . Graph () my_assertion . add (( rdflib . URIRef ( 'www.example.org/timbernerslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) np = Nanopub ( conf = np_conf , assertion = my_assertion ) np . publish () print ( np ) You can also directly provide an ORCID to attribute the publication to, instead of using the user profile: from nanopub import NanopubConf , load_profile creator_orcid = \"https://orcid.org/0000-0000-0000-0000\" np_conf = NanopubConf ( profile = load_profile (), use_test_server = True , use_server = \"http://test-server.nanopubs.lod.labs.vu.nl\" , add_prov_generated_time = True , add_pubinfo_generated_time = True , # Directly provide the ORCID: assertion_attributed_to = creator_orcid , publication_attributed_to = creator_orcid , )","title":"\u2699\ufe0f Configure the nanopubs"},{"location":"publishing/retraction/","text":"Retracting a nanopublication A nanopublication is persistent, you can never edit nor delete it. You can however retract a nanopublication. This is done by publishing a new nanopublication that states that you retract the original publication. You can use NanopubClient.retract() : from nanopub import NanopubConf , NanopubRetract np_conf = NanopubConf ( profile = load_profile (), use_test_server = True ) np = NanopubRetract ( 'http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ' , np_conf , ) np . publish () View the full retraction nanopublication here . The assertion states that the researcher (denoted by the ORCID iD from your profile) retracts the provided nanopublication: @prefix npx: <http://purl.org/nanopub/x/> . @prefix sub: <http://purl.org/np/RAv75Xhhz5jv--Nnu9RDqIGy2xHr74REGC4vtOSxrwX4c#> . sub : assertion { <https://orcid.org/0000-0000-0000-0000> npx : retracts <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ> . } By default nanopublications that have a valid retraction do not show up in search results. A valid retraction is a retraction that is signed with the same public key as the nanopublication that it retracts. Retracting a nanopublication that is not yours By default we do not retract nanopublications that are not yours (i.e. signed with another public key). If you try to do this it will trigger an AssertionError. We can use force=True to override this behavior: np = NanopubRetract ( 'http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ' , np_conf , force = True ) Find retractions of a given nanopublication You can find out whether a given publication is retracted and what the nanopublications are that retract it using NanopubClient.find_retractions_of : from nanopub import NanopubClient client = NanopubClient ( use_test_server = True ) # This URI has 1 retraction: client . find_retractions_of ( 'http://purl.org/np/RAirauh-vy5f7UJEMTm08C5bh5pnWD-abb-qk3fPYWCzc' ) [ 'http://purl.org/np/RADjlGIB8Vqt7NbG1kqzw-4aIV_k7nyIRirMhPKEYVSlc' ] # This URI has no retractions client . find_retractions_of ( 'http://purl.org/np/RAeMfoa6I05zoUmK6sRypCIy3wIpTgS8gkum7vdfOamn8' ) []","title":"Retract a nanopublication"},{"location":"publishing/retraction/#retracting-a-nanopublication","text":"A nanopublication is persistent, you can never edit nor delete it. You can however retract a nanopublication. This is done by publishing a new nanopublication that states that you retract the original publication. You can use NanopubClient.retract() : from nanopub import NanopubConf , NanopubRetract np_conf = NanopubConf ( profile = load_profile (), use_test_server = True ) np = NanopubRetract ( 'http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ' , np_conf , ) np . publish () View the full retraction nanopublication here . The assertion states that the researcher (denoted by the ORCID iD from your profile) retracts the provided nanopublication: @prefix npx: <http://purl.org/nanopub/x/> . @prefix sub: <http://purl.org/np/RAv75Xhhz5jv--Nnu9RDqIGy2xHr74REGC4vtOSxrwX4c#> . sub : assertion { <https://orcid.org/0000-0000-0000-0000> npx : retracts <http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ> . } By default nanopublications that have a valid retraction do not show up in search results. A valid retraction is a retraction that is signed with the same public key as the nanopublication that it retracts.","title":"Retracting a nanopublication"},{"location":"publishing/retraction/#retracting-a-nanopublication-that-is-not-yours","text":"By default we do not retract nanopublications that are not yours (i.e. signed with another public key). If you try to do this it will trigger an AssertionError. We can use force=True to override this behavior: np = NanopubRetract ( 'http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ' , np_conf , force = True )","title":"Retracting a nanopublication that is not yours"},{"location":"publishing/retraction/#find-retractions-of-a-given-nanopublication","text":"You can find out whether a given publication is retracted and what the nanopublications are that retract it using NanopubClient.find_retractions_of : from nanopub import NanopubClient client = NanopubClient ( use_test_server = True ) # This URI has 1 retraction: client . find_retractions_of ( 'http://purl.org/np/RAirauh-vy5f7UJEMTm08C5bh5pnWD-abb-qk3fPYWCzc' ) [ 'http://purl.org/np/RADjlGIB8Vqt7NbG1kqzw-4aIV_k7nyIRirMhPKEYVSlc' ] # This URI has no retractions client . find_retractions_of ( 'http://purl.org/np/RAeMfoa6I05zoUmK6sRypCIy3wIpTgS8gkum7vdfOamn8' ) []","title":"Find retractions of a given nanopublication"},{"location":"publishing/setting-subgraphs/","text":"Setting publication info and provenance Here we show how you can control the publication info and provenance parts of the nanopublication. Specifying where the nanopublication is derived from You can specify that the nanopub\u2019s assertion is derived from another URI (such as an existing nanopublication): from rdflib import URIRef , Graph , BNode , RDF , FOAF from nanopub import Nanopub my_assertion = Graph () my_assertion . add (( BNode ( 'timbernserslee' ), RDF . type , FOAF . Person )) np = Nanopub ( assertion = my_assertion , conf = NanopubConf ( add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , derived_from = URIRef ( 'http://www.example.org/another-nanopublication' ), ) ) Note that derived_from may also be passed a list of URIs. The provenance part of the publication will denote: @prefix sub: <http://purl.org/nanopub/temp/mynanopub#> . @prefix prov: <http://www.w3.org/ns/prov#> . @prefix xsd: <http://www.w3.org/2001/XMLSchema#> . : provenance { sub : assertion prov : wasDerivedFrom <http://www.example.org/another-nanopublication> . } Attributing the assertion to someone You can attribute the assertion to someone by specifying the assertion_attributed_to argument: from rdflib import URIRef , Graph , BNode , RDF , FOAF from nanopub import Nanopub my_assertion = Graph () my_assertion . add (( BNode ( 'timbernserslee' ), RDF . type , FOAF . Person )) np = Nanopub ( assertion = my_assertion , conf = NanopubConf ( add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , assertion_attributed_to = URIRef ( 'https://orcid.org/0000-0000-0000-0000' ), ) ) The provenance part of the publication will denote: @prefix : <http://purl.org/nanopub/temp/mynanopub#> . @prefix prov: <http://www.w3.org/ns/prov#> . : provenance { : assertion prov : wasAttributedTo <https://orcid.org/0000-0000-0000-0000> . } Note: Often the assertion should be attributed to yourself. Instead of passing your ORCID iD to assertion_attributed_to , you can easily tell nanopub to attribute the assertion to the ORCID iD in your profile by setting attribute_assertion_to_profile=True . Specifying custom provenance triples You can add your own triples to the provenance graph of the nanopublication by passing them in an rdflib.Graph object to the provenance_rdf argument: import rdflib from nanopub import namespaces , Nanopub my_assertion = rdflib . Graph () my_assertion . add (( rdflib . term . BNode ( 'timbernserslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) provenance_rdf = rdflib . Graph () provenance_rdf = provenance_rdf . add (( BNode ( 'timbernserslee' ), namespaces . PROV . actedOnBehalfOf , BNode ( 'markzuckerberg' ) )) np = Nanopub ( assertion = my_assertion , provenance_rdf = provenance_rdf , conf = NanopubConf ( add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , ) ) Specifying custom publication info triples You can add your own triples to the publication info graph of the nanopublication by passing them in an rdflib.Graph object to the pubinfo_rdf argument: from rdflib import Graph , BNode , RDF , FOAF from nanopub import namespaces , Nanopub my_assertion = Graph () my_assertion . add (( BNode ( 'timbernserslee' ), RDF . type , FOAF . Person )) pubinfo_rdf = rdflib . Graph () pubinfo_rdf = pubinfo_rdf . add (( BNode ( 'activity' ), RDF . type , namespaces . PROV . Activity )) np = Nanopub ( assertion = my_assertion , pubinfo = pubinfo_rdf , conf = NanopubConf ( add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , ) )","title":"Set provenance and pubinfo"},{"location":"publishing/setting-subgraphs/#setting-publication-info-and-provenance","text":"Here we show how you can control the publication info and provenance parts of the nanopublication.","title":"Setting publication info and provenance"},{"location":"publishing/setting-subgraphs/#specifying-where-the-nanopublication-is-derived-from","text":"You can specify that the nanopub\u2019s assertion is derived from another URI (such as an existing nanopublication): from rdflib import URIRef , Graph , BNode , RDF , FOAF from nanopub import Nanopub my_assertion = Graph () my_assertion . add (( BNode ( 'timbernserslee' ), RDF . type , FOAF . Person )) np = Nanopub ( assertion = my_assertion , conf = NanopubConf ( add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , derived_from = URIRef ( 'http://www.example.org/another-nanopublication' ), ) ) Note that derived_from may also be passed a list of URIs. The provenance part of the publication will denote: @prefix sub: <http://purl.org/nanopub/temp/mynanopub#> . @prefix prov: <http://www.w3.org/ns/prov#> . @prefix xsd: <http://www.w3.org/2001/XMLSchema#> . : provenance { sub : assertion prov : wasDerivedFrom <http://www.example.org/another-nanopublication> . }","title":"Specifying where the nanopublication is derived from"},{"location":"publishing/setting-subgraphs/#attributing-the-assertion-to-someone","text":"You can attribute the assertion to someone by specifying the assertion_attributed_to argument: from rdflib import URIRef , Graph , BNode , RDF , FOAF from nanopub import Nanopub my_assertion = Graph () my_assertion . add (( BNode ( 'timbernserslee' ), RDF . type , FOAF . Person )) np = Nanopub ( assertion = my_assertion , conf = NanopubConf ( add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , assertion_attributed_to = URIRef ( 'https://orcid.org/0000-0000-0000-0000' ), ) ) The provenance part of the publication will denote: @prefix : <http://purl.org/nanopub/temp/mynanopub#> . @prefix prov: <http://www.w3.org/ns/prov#> . : provenance { : assertion prov : wasAttributedTo <https://orcid.org/0000-0000-0000-0000> . } Note: Often the assertion should be attributed to yourself. Instead of passing your ORCID iD to assertion_attributed_to , you can easily tell nanopub to attribute the assertion to the ORCID iD in your profile by setting attribute_assertion_to_profile=True .","title":"Attributing the assertion to someone"},{"location":"publishing/setting-subgraphs/#specifying-custom-provenance-triples","text":"You can add your own triples to the provenance graph of the nanopublication by passing them in an rdflib.Graph object to the provenance_rdf argument: import rdflib from nanopub import namespaces , Nanopub my_assertion = rdflib . Graph () my_assertion . add (( rdflib . term . BNode ( 'timbernserslee' ), rdflib . RDF . type , rdflib . FOAF . Person )) provenance_rdf = rdflib . Graph () provenance_rdf = provenance_rdf . add (( BNode ( 'timbernserslee' ), namespaces . PROV . actedOnBehalfOf , BNode ( 'markzuckerberg' ) )) np = Nanopub ( assertion = my_assertion , provenance_rdf = provenance_rdf , conf = NanopubConf ( add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , ) )","title":"Specifying custom provenance triples"},{"location":"publishing/setting-subgraphs/#specifying-custom-publication-info-triples","text":"You can add your own triples to the publication info graph of the nanopublication by passing them in an rdflib.Graph object to the pubinfo_rdf argument: from rdflib import Graph , BNode , RDF , FOAF from nanopub import namespaces , Nanopub my_assertion = Graph () my_assertion . add (( BNode ( 'timbernserslee' ), RDF . type , FOAF . Person )) pubinfo_rdf = rdflib . Graph () pubinfo_rdf = pubinfo_rdf . add (( BNode ( 'activity' ), RDF . type , namespaces . PROV . Activity )) np = Nanopub ( assertion = my_assertion , pubinfo = pubinfo_rdf , conf = NanopubConf ( add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , ) )","title":"Specifying custom publication info triples"},{"location":"publishing/templates/","text":"Using nanopublications templates The nanopub library provides a few objects to easily publish specific types of nanopublications, such as claims, retraction, nanopub indexes, or ORCID introductions. You can also easily create your own template by inheriting from the Nanopub class. \ud83d\uddc2\ufe0f Nanopub index To publish an index of nanopublications. Note that a nanopub cannot contain more than 1200 triples. So to publish large index with more than 1200 elements we need to split it and publish multiple nanopublications: the different nanopub index that composes this index, and a top level index that points to all the nanopub indexes. For this we will use the create_nanopub_index() function instead of directly instantiating a NanopubIndex from nanopub import create_nanopub_index, NanopubConf np_conf = NanopubConf ( profile = load_profile () , use_test_server = True ) np_list = create_nanopub_index ( conf = np_conf, np_list =[ \"https://purl.org/np/RAD28Nl4h_mFH92bsHUrtqoU4C6DCYy_BRTvpimjVFgJo\" , \"https://purl.org/np/RAEhbEJ1tdhPqM6gNPScX9vIY1ZtUzOz7woeJNzB3sh3E\" , ] , title = \"My nanopub index\" , description = \"This is my nanopub index\" , creation_time = \"2020-09-21T00:00:00\" , creators =[ \"https://orcid.org/0000-0000-0000-0000\" ] , see_also = \"https://github.com/fair-workflows/nanopub\" , ) for np in np_list: np.publish () print ( np ) \ud83d\udc64 ORCID introduction To publish a nanopublication introducing a keypair for an ORCID. from nanopub import NanopubConf , NanopubIntroduction np_conf = NanopubConf ( profile = load_profile (), use_test_server = True ) np = NanopubIntroduction ( conf = np_conf , host = None , ) np . publish () \ud83d\udcdd Update a published nanopub To update a nanopub content, provide the URI to the nanopub to update, and the new assertion graph. You can also provide the pubinfo, provenance and complete RDF (like for the Nanopub object). from nanopub import NanopubConf , NanopubUpdate np_conf = NanopubConf ( profile = load_profile ()) assertion = Graph () assertion . add (( BNode ( 'test' ), namespaces . HYCL . claims , Literal ( 'This is the updated nanopublication assertion' ) )) np = NanopubUpdate ( uri = \"http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ\" , conf = np_conf , assertion = assertion , ) np . sign () \ud83d\udcac Claim Publish a simple HYCL claim: from nanopub import NanopubConf , NanopubClaim np_conf = NanopubConf ( profile = load_profile (), use_test_server = True ) np = NanopubClaim ( claim = 'All cats are grey' , conf = np_conf , ) np . publish () \u270d\ufe0f Create your own template You can create your own template by inheriting from the Nanopub class. It allows you to define classes to assist your users with publishing specific sets of triples. Here is the NanopubClaim class explained: from rdflib import RDF , RDFS , Literal , URIRef from nanopub.config import NanopubConf from nanopub.namespaces import HYCL from nanopub.nanopub import Nanopub class NanopubClaim ( Nanopub ): def __init__ ( self , # Define the args the users should provide claim : str , conf : NanopubConf , ) -> None : # Enforce a specific nanopub conf conf . add_prov_generated_time = True conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True super () . __init__ ( conf = config , ) # Build the nanopub assertion from the args this_statement = self . _namespace . claim self . assertion . add (( this_statement , RDF . type , HYCL . Statement )) self . assertion . add (( this_statement , RDFS . label , Literal ( claim ))) orcid_id_uri = URIRef ( self . profile . orcid_id ) self . provenance . add (( orcid_id_uri , HYCL . claims , this_statement ))","title":"Use nanopub templates"},{"location":"publishing/templates/#using-nanopublications-templates","text":"The nanopub library provides a few objects to easily publish specific types of nanopublications, such as claims, retraction, nanopub indexes, or ORCID introductions. You can also easily create your own template by inheriting from the Nanopub class.","title":"Using nanopublications templates"},{"location":"publishing/templates/#nanopub-index","text":"To publish an index of nanopublications. Note that a nanopub cannot contain more than 1200 triples. So to publish large index with more than 1200 elements we need to split it and publish multiple nanopublications: the different nanopub index that composes this index, and a top level index that points to all the nanopub indexes. For this we will use the create_nanopub_index() function instead of directly instantiating a NanopubIndex from nanopub import create_nanopub_index, NanopubConf np_conf = NanopubConf ( profile = load_profile () , use_test_server = True ) np_list = create_nanopub_index ( conf = np_conf, np_list =[ \"https://purl.org/np/RAD28Nl4h_mFH92bsHUrtqoU4C6DCYy_BRTvpimjVFgJo\" , \"https://purl.org/np/RAEhbEJ1tdhPqM6gNPScX9vIY1ZtUzOz7woeJNzB3sh3E\" , ] , title = \"My nanopub index\" , description = \"This is my nanopub index\" , creation_time = \"2020-09-21T00:00:00\" , creators =[ \"https://orcid.org/0000-0000-0000-0000\" ] , see_also = \"https://github.com/fair-workflows/nanopub\" , ) for np in np_list: np.publish () print ( np )","title":"\ud83d\uddc2\ufe0f Nanopub index"},{"location":"publishing/templates/#orcid-introduction","text":"To publish a nanopublication introducing a keypair for an ORCID. from nanopub import NanopubConf , NanopubIntroduction np_conf = NanopubConf ( profile = load_profile (), use_test_server = True ) np = NanopubIntroduction ( conf = np_conf , host = None , ) np . publish ()","title":"\ud83d\udc64 ORCID introduction"},{"location":"publishing/templates/#update-a-published-nanopub","text":"To update a nanopub content, provide the URI to the nanopub to update, and the new assertion graph. You can also provide the pubinfo, provenance and complete RDF (like for the Nanopub object). from nanopub import NanopubConf , NanopubUpdate np_conf = NanopubConf ( profile = load_profile ()) assertion = Graph () assertion . add (( BNode ( 'test' ), namespaces . HYCL . claims , Literal ( 'This is the updated nanopublication assertion' ) )) np = NanopubUpdate ( uri = \"http://purl.org/np/RAfk_zBYDerxd6ipfv8fAcQHEzgZcVylMTEkiLlMzsgwQ\" , conf = np_conf , assertion = assertion , ) np . sign ()","title":"\ud83d\udcdd Update a published nanopub"},{"location":"publishing/templates/#claim","text":"Publish a simple HYCL claim: from nanopub import NanopubConf , NanopubClaim np_conf = NanopubConf ( profile = load_profile (), use_test_server = True ) np = NanopubClaim ( claim = 'All cats are grey' , conf = np_conf , ) np . publish ()","title":"\ud83d\udcac Claim"},{"location":"publishing/templates/#create-your-own-template","text":"You can create your own template by inheriting from the Nanopub class. It allows you to define classes to assist your users with publishing specific sets of triples. Here is the NanopubClaim class explained: from rdflib import RDF , RDFS , Literal , URIRef from nanopub.config import NanopubConf from nanopub.namespaces import HYCL from nanopub.nanopub import Nanopub class NanopubClaim ( Nanopub ): def __init__ ( self , # Define the args the users should provide claim : str , conf : NanopubConf , ) -> None : # Enforce a specific nanopub conf conf . add_prov_generated_time = True conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True super () . __init__ ( conf = config , ) # Build the nanopub assertion from the args this_statement = self . _namespace . claim self . assertion . add (( this_statement , RDF . type , HYCL . Statement )) self . assertion . add (( this_statement , RDFS . label , Literal ( claim ))) orcid_id_uri = URIRef ( self . profile . orcid_id ) self . provenance . add (( orcid_id_uri , HYCL . claims , this_statement ))","title":"\u270d\ufe0f Create your own template"},{"location":"publishing/using-publication-namespace/","text":"Using the nanopublication\u2019s namespace In a nanopublication you often want to refer to a concept that is not defined somewhere on the WWW. In that case it makes sense to make use of the namespace of the nanopublication itself, see for example this assertion that uses nanopub-uri#timbernerslee to refer to the concept Tim Berners Lee. @prefix sub: <http://purl.org/np/RA_j6TPcnoQJ_XkISjugTgaRsFGLhpbZCC3mE7fXs0REI#> . sub : assertion { sub : timbernerslee a <http://xmlns.com/foaf/0.1/Person> . } Using blank nodes But how do you make use of the nanopublication\u2019s namespace if you do not have access to the published nanopublication URI yet? We solve that by making use of blank nodes. Upon publication, any blank nodes in the rdf graph are replaced with the nanopub\u2019s URI, with the blank node name as a fragment. For example, if the blank node is called \u2018timbernerslee\u2019, that would result in a URI composed of the nanopub\u2019s (base) URI, followed by #timbernslee. We can thus use blank nodes to refer to new concepts, making use of the namespace of the to-be-published URI. An example: from rdflib import Graph , BNode , RDF , FOAF from nanopub import Nanopub , NanopubConf , load_profile my_assertion = Graph () # We want to introduce a new concept in our publication: Tim Berners Lee tim = BNode ( 'timbernerslee' ) # We assert that he is a person my_assertion . add (( tim , RDF . type , FOAF . Person ) ) # Define the config for your nanopubs np_conf = NanopubConf ( profile = load_profile (), add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , ) # And create a nanopub object for this assertion np = Nanopub ( assertion = my_assertion , conf = np_conf ) # Let's publish this to the test server np . publish () print ( np ) View the full nanopublication here . As you can see in the assertion, the \u2018timbernerslee\u2019 blank node is replaced with a uri in the nanopublication\u2019s namespace: @prefix sub: <http://purl.org/np/RAdaZsPRcY5usXFKwSBfz9g-HOu-Bo1XmmhQc4g7uESgU#> . sub : assertion { sub : timbernerslee a <http://xmlns.com/foaf/0.1/Person> . } Introducing a concept You can optionally specify that the Publication introduces a particular concept using blank nodes. The pubinfo graph will note that this nanopub npx:introduces the concept. The concept should be a blank node (rdflib.term.BNode), and is converted to a URI derived from the nanopub\u2019s URI with a fragment (#) made from the blank node\u2019s name. An example: import rdflib from nanopub import Nanopub , NanopubConf , load_profile my_assertion = rdflib . Graph () # We want to introduce a new concept in our publication: Tim Berners Lee tim = rdflib . BNode ( 'timbernerslee' ) # We assert that he is a person my_assertion . add (( tim , rdflib . RDF . type , rdflib . FOAF . Person ) ) # And create a nanopub introducing this new concept np = Nanopub ( assertion = my_assertion , introduces_concept = tim , conf = NanopubConf ( profile = load_profile (), add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , ) ) # Let's publish this to the test server np . publish () print ( np ) # Published to http://purl.org/np/RAq9gFEgxlOyG9SSDZ5DmBbyGet2z6pkrdWXIVYa6U6qI # Published concept to http://purl.org/np/RAq9gFEgxlOyG9SSDZ5DmBbyGet2z6pkrdWXIVYa6U6qI#timbernerslee View the full nanopublication here . The publication info of the nanopublication denotes that this nanopublication introduces the \u2018timbernerslee\u2019 concept: @prefix npx: <http://purl.org/nanopub/x/> . @prefix sub: <http://purl.org/np/RAq9gFEgxlOyG9SSDZ5DmBbyGet2z6pkrdWXIVYa6U6qI#> . @prefix this: <http://purl.org/np/RAq9gFEgxlOyG9SSDZ5DmBbyGet2z6pkrdWXIVYa6U6qI> . sub : pubinfo { this : npx : introduces sub : timbernerslee . }","title":"Use the nanopub's namespace"},{"location":"publishing/using-publication-namespace/#using-the-nanopublications-namespace","text":"In a nanopublication you often want to refer to a concept that is not defined somewhere on the WWW. In that case it makes sense to make use of the namespace of the nanopublication itself, see for example this assertion that uses nanopub-uri#timbernerslee to refer to the concept Tim Berners Lee. @prefix sub: <http://purl.org/np/RA_j6TPcnoQJ_XkISjugTgaRsFGLhpbZCC3mE7fXs0REI#> . sub : assertion { sub : timbernerslee a <http://xmlns.com/foaf/0.1/Person> . }","title":"Using the nanopublication's namespace"},{"location":"publishing/using-publication-namespace/#using-blank-nodes","text":"But how do you make use of the nanopublication\u2019s namespace if you do not have access to the published nanopublication URI yet? We solve that by making use of blank nodes. Upon publication, any blank nodes in the rdf graph are replaced with the nanopub\u2019s URI, with the blank node name as a fragment. For example, if the blank node is called \u2018timbernerslee\u2019, that would result in a URI composed of the nanopub\u2019s (base) URI, followed by #timbernslee. We can thus use blank nodes to refer to new concepts, making use of the namespace of the to-be-published URI. An example: from rdflib import Graph , BNode , RDF , FOAF from nanopub import Nanopub , NanopubConf , load_profile my_assertion = Graph () # We want to introduce a new concept in our publication: Tim Berners Lee tim = BNode ( 'timbernerslee' ) # We assert that he is a person my_assertion . add (( tim , RDF . type , FOAF . Person ) ) # Define the config for your nanopubs np_conf = NanopubConf ( profile = load_profile (), add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , ) # And create a nanopub object for this assertion np = Nanopub ( assertion = my_assertion , conf = np_conf ) # Let's publish this to the test server np . publish () print ( np ) View the full nanopublication here . As you can see in the assertion, the \u2018timbernerslee\u2019 blank node is replaced with a uri in the nanopublication\u2019s namespace: @prefix sub: <http://purl.org/np/RAdaZsPRcY5usXFKwSBfz9g-HOu-Bo1XmmhQc4g7uESgU#> . sub : assertion { sub : timbernerslee a <http://xmlns.com/foaf/0.1/Person> . }","title":"Using blank nodes"},{"location":"publishing/using-publication-namespace/#introducing-a-concept","text":"You can optionally specify that the Publication introduces a particular concept using blank nodes. The pubinfo graph will note that this nanopub npx:introduces the concept. The concept should be a blank node (rdflib.term.BNode), and is converted to a URI derived from the nanopub\u2019s URI with a fragment (#) made from the blank node\u2019s name. An example: import rdflib from nanopub import Nanopub , NanopubConf , load_profile my_assertion = rdflib . Graph () # We want to introduce a new concept in our publication: Tim Berners Lee tim = rdflib . BNode ( 'timbernerslee' ) # We assert that he is a person my_assertion . add (( tim , rdflib . RDF . type , rdflib . FOAF . Person ) ) # And create a nanopub introducing this new concept np = Nanopub ( assertion = my_assertion , introduces_concept = tim , conf = NanopubConf ( profile = load_profile (), add_prov_generated_time = True , add_pubinfo_generated_time = True , attribute_publication_to_profile = True , ) ) # Let's publish this to the test server np . publish () print ( np ) # Published to http://purl.org/np/RAq9gFEgxlOyG9SSDZ5DmBbyGet2z6pkrdWXIVYa6U6qI # Published concept to http://purl.org/np/RAq9gFEgxlOyG9SSDZ5DmBbyGet2z6pkrdWXIVYa6U6qI#timbernerslee View the full nanopublication here . The publication info of the nanopublication denotes that this nanopublication introduces the \u2018timbernerslee\u2019 concept: @prefix npx: <http://purl.org/nanopub/x/> . @prefix sub: <http://purl.org/np/RAq9gFEgxlOyG9SSDZ5DmBbyGet2z6pkrdWXIVYa6U6qI#> . @prefix this: <http://purl.org/np/RAq9gFEgxlOyG9SSDZ5DmBbyGet2z6pkrdWXIVYa6U6qI> . sub : pubinfo { this : npx : introduces sub : timbernerslee . }","title":"Introducing a concept"},{"location":"reference/client/","text":"NanopubClient Provides utility functions for searching published nanopublications. Parameters: Name Type Description Default use_test_server bool Toggle using the test nanopub server. False use_server str Provide the URL of a nanopub server to use NANOPUB_SERVER_LIST[0] Source code in nanopub/client.pyclass NanopubClient : \"\"\" Provides utility functions for searching published nanopublications. Args: use_test_server (bool): Toggle using the test nanopub server. use_server (str): Provide the URL of a nanopub server to use \"\"\" def __init__ ( self , use_test_server = False , use_server = NANOPUB_SERVER_LIST [ 0 ], ): self . use_test_server = use_test_server if use_test_server : self . grlc_urls = [ NANOPUB_TEST_GRLC_URL ] self . use_server = NANOPUB_TEST_SERVER else : self . grlc_urls = NANOPUB_GRLC_URLS self . use_server = use_server if use_server not in NANOPUB_SERVER_LIST : log . warn ( f \" { use_server } is not in our list of nanopub servers. { ', ' . join ( NANOPUB_SERVER_LIST ) } \\n Make sure you are using an existing Nanopub server.\" ) def find_nanopubs_with_text ( self , text : str , pubkey : str = None , filter_retracted : bool = True ): \"\"\"Text search. Search the nanopub servers for any nanopubs matching the given search text. Args: text (str): The text to search on pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" if len ( text ) == 0 : return [] endpoint = \"find_signed_nanopubs_with_text\" params = { \"text\" : text , \"graphpred\" : \"\" , \"month\" : \"\" , \"day\" : \"\" , \"year\" : \"\" } if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_nanopubs_with_text\" return self . _search ( endpoint = endpoint , params = params ) def find_nanopubs_with_pattern ( self , subj : str = None , pred : str = None , obj : str = None , filter_retracted : bool = True , pubkey : str = None , ): \"\"\"Pattern search. Search the nanopub servers for any nanopubs matching the given RDF pattern. You can leave parts of the triple to match anything by not specifying subj, pred, or obj arguments. Args: subj (str): URI of the subject that you want to match triples on. pred (str): URI of the predicate that you want to match triples on. obj (str): URI of the object that you want to match triples on. pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" params = {} endpoint = \"find_signed_nanopubs_with_pattern\" if subj : params [ \"subj\" ] = subj if pred : params [ \"pred\" ] = pred if obj : params [ \"obj\" ] = obj if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_nanopubs_with_pattern\" yield from self . _search ( endpoint = endpoint , params = params ) def find_things ( self , type : str , searchterm : str = \" \" , pubkey : str = None , filter_retracted : bool = True , ): \"\"\"Search things (experimental). Search for any nanopublications that introduce a concept of the given type, that contain text with the given search term. Args: type (str): A URI denoting the type of the introduced concept searchterm (str): The term that you want to search on pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" if searchterm == \"\" : raise ValueError ( f \"Searchterm can not be an empty string: { searchterm } \" ) endpoint = \"find_signed_things\" params = dict () params [ \"type\" ] = type params [ \"searchterm\" ] = searchterm if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_things\" yield from self . _search ( endpoint = endpoint , params = params ) def find_retractions_of ( self , source : Union [ str , Nanopub ], valid_only = True ) -> List [ str ]: \"\"\"Find retractions of given URI Find all nanopublications that retract a certain nanopublication. Args: source (str or nanopub.Publication): URI or Nanopub object to find retractions for valid_only (bool): Toggle returning only valid retractions, i.e. retractions that are signed with the same public key as the publication they retract. Default is True. Returns: List of uris that retract the given URI \"\"\" if isinstance ( source , Nanopub ): if source . is_test_publication and not self . use_test_server : warnings . warn ( \"You are trying to find retractions on the production server, \" \"whereas this publication lives on the test server\" ) elif not source . is_test_publication and self . use_test_server : warnings . warn ( \"You are trying to find retractions on the test server, \" \"whereas this publication lives on the production server\" ) uri = source . source_uri else : uri = source if valid_only : source_publication = Nanopub ( source_uri = uri , conf = NanopubConf ( use_test_server = self . use_test_server ) ) public_key = source_publication . signed_with_public_key if public_key is None : raise ValueError ( \"The source publication is not signed with a public key\" ) else : public_key = None results = self . find_nanopubs_with_pattern ( pred = namespaces . NPX . retracts , obj = rdflib . URIRef ( uri ), pubkey = public_key , filter_retracted = False , ) return [ result [ \"np\" ] for result in results ] @staticmethod def _query_grlc ( params : dict , endpoint : str , grlc_url : str ) -> requests . Response : \"\"\"Query a specific nanopub server grlc endpoint.\"\"\" headers = { \"Accept\" : \"application/json\" } url = grlc_url + endpoint return requests . get ( url , params = params , headers = headers ) def _query_grlc_try_servers ( self , params : dict , endpoint : str ) -> Tuple [ requests . Response , str ]: \"\"\"Query the nanopub server grlc endpoint. Query a nanopub grlc server endpoint (for example: find_text). Try several of the nanopub garlic servers. Returns: tuple of: r: request response, grlc_url: url of the grlc server used. \"\"\" r = None random . shuffle ( self . grlc_urls ) # To balance load across servers for grlc_url in self . grlc_urls : r = self . _query_grlc ( params , endpoint , grlc_url ) if r . status_code == 502 : # Server is likely down warnings . warn ( f \"Could not get response from { grlc_url } , trying other servers\" ) else : r . raise_for_status () # For non-502 errors we don't want to try other servers return r , grlc_url resp = \"\" if r : resp = f \" Last response: { r . status_code } : { r . reason } \" raise requests . HTTPError ( f \"Could not get response from any of the nanopub grlc \" f \"endpoints. { resp } \" ) def _search ( self , endpoint : str , params : dict ): \"\"\" General nanopub server search method. User should use e.g. find_nanopubs_with_text, find_things etc. Args: endpoint: garlic endpoint to query, for example: find_things params: dictionary with parameters for get request Raises: JSONDecodeError: in case response can't be serialized as JSON, this can happen due to a virtuoso error. \"\"\" has_results = True page_number = 1 grlc_url = None while has_results : params [ \"page\" ] = page_number # First try different servers if grlc_url is None : r , grlc_url = self . _query_grlc_try_servers ( params , endpoint ) # If we have found a grlc server we should use that for further queries (so # pagination works properly) else : r = self . _query_grlc ( params , endpoint , grlc_url ) r . raise_for_status () # Check if JSON was actually returned. HTML can be returned instead # if e.g. virtuoso errors on the backend (due to spaces in the search # string, for example). try : results = r . json () except ValueError as e : # Try to give a more understandable error to user when the response # is not JSON... raise ValueError ( \"The server returned HTML instead of the requested JSON. \" \"This is usually caused by the triple store (e.g. virtuoso) \" \"throwing an error for the given search query.\" ) from e bindings = results [ \"results\" ][ \"bindings\" ] if not bindings : has_results = False page_number += page_number for result in bindings : yield self . _parse_search_result ( result ) @staticmethod def _parse_search_result ( result : dict ): \"\"\" Parse a nanopub search result (i.e. referring to one matching nanopublication). Rename 'v' to 'description', select only date, np, label and description fields and unnest them. \"\"\" parsed = dict () parsed [ \"np\" ] = result [ \"np\" ][ \"value\" ] if \"v\" in result : parsed [ \"description\" ] = result [ \"v\" ][ \"value\" ] elif \"description\" in result : parsed [ \"description\" ] = result [ \"description\" ][ \"value\" ] else : parsed [ \"description\" ] = \"\" if \"label\" in result : parsed [ \"label\" ] = result [ \"label\" ][ \"value\" ] parsed [ \"date\" ] = result [ \"date\" ][ \"value\" ] return parsed find_nanopubs_with_pattern ( subj = None , pred = None , obj = None , filter_retracted = True , pubkey = None ) Pattern search. Search the nanopub servers for any nanopubs matching the given RDF pattern. You can leave parts of the triple to match anything by not specifying subj, pred, or obj arguments. Parameters: Name Type Description Default subj str URI of the subject that you want to match triples on. None pred str URI of the predicate that you want to match triples on. None obj str URI of the object that you want to match triples on. None pubkey str Public key that the matching nanopubs should be signed with None filter_retracted bool Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. True Yields: Type Description dicts depicting matching nanopublications. Each dict holds: \u2018np\u2019: the nanopublication uri, \u2018date\u2019: date of creation of the nanopublication, \u2018description\u2019: A description of the nanopublication (if found in RDF). Source code in nanopub/client.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def find_nanopubs_with_pattern ( self , subj : str = None , pred : str = None , obj : str = None , filter_retracted : bool = True , pubkey : str = None , ): \"\"\"Pattern search. Search the nanopub servers for any nanopubs matching the given RDF pattern. You can leave parts of the triple to match anything by not specifying subj, pred, or obj arguments. Args: subj (str): URI of the subject that you want to match triples on. pred (str): URI of the predicate that you want to match triples on. obj (str): URI of the object that you want to match triples on. pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" params = {} endpoint = \"find_signed_nanopubs_with_pattern\" if subj : params [ \"subj\" ] = subj if pred : params [ \"pred\" ] = pred if obj : params [ \"obj\" ] = obj if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_nanopubs_with_pattern\" yield from self . _search ( endpoint = endpoint , params = params ) find_nanopubs_with_text ( text , pubkey = None , filter_retracted = True ) Text search. Search the nanopub servers for any nanopubs matching the given search text. Parameters: Name Type Description Default text str The text to search on required pubkey str Public key that the matching nanopubs should be signed with None filter_retracted bool Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. True Yields: Type Description dicts depicting matching nanopublications. Each dict holds: \u2018np\u2019: the nanopublication uri, \u2018date\u2019: date of creation of the nanopublication, \u2018description\u2019: A description of the nanopublication (if found in RDF). Source code in nanopub/client.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def find_nanopubs_with_text ( self , text : str , pubkey : str = None , filter_retracted : bool = True ): \"\"\"Text search. Search the nanopub servers for any nanopubs matching the given search text. Args: text (str): The text to search on pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" if len ( text ) == 0 : return [] endpoint = \"find_signed_nanopubs_with_text\" params = { \"text\" : text , \"graphpred\" : \"\" , \"month\" : \"\" , \"day\" : \"\" , \"year\" : \"\" } if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_nanopubs_with_text\" return self . _search ( endpoint = endpoint , params = params ) find_retractions_of ( source , valid_only = True ) Find retractions of given URI Find all nanopublications that retract a certain nanopublication. Parameters: Name Type Description Default source str or nanopub.Publication URI or Nanopub object to find retractions for required valid_only bool Toggle returning only valid retractions, i.e. retractions that are signed with the same public key as the publication they retract. Default is True. True Returns: Type Description List [ str ] List of uris that retract the given URI Source code in nanopub/client.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def find_retractions_of ( self , source : Union [ str , Nanopub ], valid_only = True ) -> List [ str ]: \"\"\"Find retractions of given URI Find all nanopublications that retract a certain nanopublication. Args: source (str or nanopub.Publication): URI or Nanopub object to find retractions for valid_only (bool): Toggle returning only valid retractions, i.e. retractions that are signed with the same public key as the publication they retract. Default is True. Returns: List of uris that retract the given URI \"\"\" if isinstance ( source , Nanopub ): if source . is_test_publication and not self . use_test_server : warnings . warn ( \"You are trying to find retractions on the production server, \" \"whereas this publication lives on the test server\" ) elif not source . is_test_publication and self . use_test_server : warnings . warn ( \"You are trying to find retractions on the test server, \" \"whereas this publication lives on the production server\" ) uri = source . source_uri else : uri = source if valid_only : source_publication = Nanopub ( source_uri = uri , conf = NanopubConf ( use_test_server = self . use_test_server ) ) public_key = source_publication . signed_with_public_key if public_key is None : raise ValueError ( \"The source publication is not signed with a public key\" ) else : public_key = None results = self . find_nanopubs_with_pattern ( pred = namespaces . NPX . retracts , obj = rdflib . URIRef ( uri ), pubkey = public_key , filter_retracted = False , ) return [ result [ \"np\" ] for result in results ] find_things ( type , searchterm = ' ' , pubkey = None , filter_retracted = True ) Search things (experimental). Search for any nanopublications that introduce a concept of the given type, that contain text with the given search term. Parameters: Name Type Description Default type str A URI denoting the type of the introduced concept required searchterm str The term that you want to search on ' ' pubkey str Public key that the matching nanopubs should be signed with None filter_retracted bool Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. True Yields: Type Description dicts depicting matching nanopublications. Each dict holds: \u2018np\u2019: the nanopublication uri, \u2018date\u2019: date of creation of the nanopublication, \u2018description\u2019: A description of the nanopublication (if found in RDF). Source code in nanopub/client.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def find_things ( self , type : str , searchterm : str = \" \" , pubkey : str = None , filter_retracted : bool = True , ): \"\"\"Search things (experimental). Search for any nanopublications that introduce a concept of the given type, that contain text with the given search term. Args: type (str): A URI denoting the type of the introduced concept searchterm (str): The term that you want to search on pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" if searchterm == \"\" : raise ValueError ( f \"Searchterm can not be an empty string: { searchterm } \" ) endpoint = \"find_signed_things\" params = dict () params [ \"type\" ] = type params [ \"searchterm\" ] = searchterm if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_things\" yield from self . _search ( endpoint = endpoint , params = params )","title":"Client"},{"location":"reference/client/#nanopubclient","text":"Provides utility functions for searching published nanopublications. Parameters: Name Type Description Default use_test_server bool Toggle using the test nanopub server. False use_server str Provide the URL of a nanopub server to use NANOPUB_SERVER_LIST[0] Source code in nanopub/client.pyclass NanopubClient : \"\"\" Provides utility functions for searching published nanopublications. Args: use_test_server (bool): Toggle using the test nanopub server. use_server (str): Provide the URL of a nanopub server to use \"\"\" def __init__ ( self , use_test_server = False , use_server = NANOPUB_SERVER_LIST [ 0 ], ): self . use_test_server = use_test_server if use_test_server : self . grlc_urls = [ NANOPUB_TEST_GRLC_URL ] self . use_server = NANOPUB_TEST_SERVER else : self . grlc_urls = NANOPUB_GRLC_URLS self . use_server = use_server if use_server not in NANOPUB_SERVER_LIST : log . warn ( f \" { use_server } is not in our list of nanopub servers. { ', ' . join ( NANOPUB_SERVER_LIST ) } \\n Make sure you are using an existing Nanopub server.\" ) def find_nanopubs_with_text ( self , text : str , pubkey : str = None , filter_retracted : bool = True ): \"\"\"Text search. Search the nanopub servers for any nanopubs matching the given search text. Args: text (str): The text to search on pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" if len ( text ) == 0 : return [] endpoint = \"find_signed_nanopubs_with_text\" params = { \"text\" : text , \"graphpred\" : \"\" , \"month\" : \"\" , \"day\" : \"\" , \"year\" : \"\" } if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_nanopubs_with_text\" return self . _search ( endpoint = endpoint , params = params ) def find_nanopubs_with_pattern ( self , subj : str = None , pred : str = None , obj : str = None , filter_retracted : bool = True , pubkey : str = None , ): \"\"\"Pattern search. Search the nanopub servers for any nanopubs matching the given RDF pattern. You can leave parts of the triple to match anything by not specifying subj, pred, or obj arguments. Args: subj (str): URI of the subject that you want to match triples on. pred (str): URI of the predicate that you want to match triples on. obj (str): URI of the object that you want to match triples on. pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" params = {} endpoint = \"find_signed_nanopubs_with_pattern\" if subj : params [ \"subj\" ] = subj if pred : params [ \"pred\" ] = pred if obj : params [ \"obj\" ] = obj if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_nanopubs_with_pattern\" yield from self . _search ( endpoint = endpoint , params = params ) def find_things ( self , type : str , searchterm : str = \" \" , pubkey : str = None , filter_retracted : bool = True , ): \"\"\"Search things (experimental). Search for any nanopublications that introduce a concept of the given type, that contain text with the given search term. Args: type (str): A URI denoting the type of the introduced concept searchterm (str): The term that you want to search on pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" if searchterm == \"\" : raise ValueError ( f \"Searchterm can not be an empty string: { searchterm } \" ) endpoint = \"find_signed_things\" params = dict () params [ \"type\" ] = type params [ \"searchterm\" ] = searchterm if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_things\" yield from self . _search ( endpoint = endpoint , params = params ) def find_retractions_of ( self , source : Union [ str , Nanopub ], valid_only = True ) -> List [ str ]: \"\"\"Find retractions of given URI Find all nanopublications that retract a certain nanopublication. Args: source (str or nanopub.Publication): URI or Nanopub object to find retractions for valid_only (bool): Toggle returning only valid retractions, i.e. retractions that are signed with the same public key as the publication they retract. Default is True. Returns: List of uris that retract the given URI \"\"\" if isinstance ( source , Nanopub ): if source . is_test_publication and not self . use_test_server : warnings . warn ( \"You are trying to find retractions on the production server, \" \"whereas this publication lives on the test server\" ) elif not source . is_test_publication and self . use_test_server : warnings . warn ( \"You are trying to find retractions on the test server, \" \"whereas this publication lives on the production server\" ) uri = source . source_uri else : uri = source if valid_only : source_publication = Nanopub ( source_uri = uri , conf = NanopubConf ( use_test_server = self . use_test_server ) ) public_key = source_publication . signed_with_public_key if public_key is None : raise ValueError ( \"The source publication is not signed with a public key\" ) else : public_key = None results = self . find_nanopubs_with_pattern ( pred = namespaces . NPX . retracts , obj = rdflib . URIRef ( uri ), pubkey = public_key , filter_retracted = False , ) return [ result [ \"np\" ] for result in results ] @staticmethod def _query_grlc ( params : dict , endpoint : str , grlc_url : str ) -> requests . Response : \"\"\"Query a specific nanopub server grlc endpoint.\"\"\" headers = { \"Accept\" : \"application/json\" } url = grlc_url + endpoint return requests . get ( url , params = params , headers = headers ) def _query_grlc_try_servers ( self , params : dict , endpoint : str ) -> Tuple [ requests . Response , str ]: \"\"\"Query the nanopub server grlc endpoint. Query a nanopub grlc server endpoint (for example: find_text). Try several of the nanopub garlic servers. Returns: tuple of: r: request response, grlc_url: url of the grlc server used. \"\"\" r = None random . shuffle ( self . grlc_urls ) # To balance load across servers for grlc_url in self . grlc_urls : r = self . _query_grlc ( params , endpoint , grlc_url ) if r . status_code == 502 : # Server is likely down warnings . warn ( f \"Could not get response from { grlc_url } , trying other servers\" ) else : r . raise_for_status () # For non-502 errors we don't want to try other servers return r , grlc_url resp = \"\" if r : resp = f \" Last response: { r . status_code } : { r . reason } \" raise requests . HTTPError ( f \"Could not get response from any of the nanopub grlc \" f \"endpoints. { resp } \" ) def _search ( self , endpoint : str , params : dict ): \"\"\" General nanopub server search method. User should use e.g. find_nanopubs_with_text, find_things etc. Args: endpoint: garlic endpoint to query, for example: find_things params: dictionary with parameters for get request Raises: JSONDecodeError: in case response can't be serialized as JSON, this can happen due to a virtuoso error. \"\"\" has_results = True page_number = 1 grlc_url = None while has_results : params [ \"page\" ] = page_number # First try different servers if grlc_url is None : r , grlc_url = self . _query_grlc_try_servers ( params , endpoint ) # If we have found a grlc server we should use that for further queries (so # pagination works properly) else : r = self . _query_grlc ( params , endpoint , grlc_url ) r . raise_for_status () # Check if JSON was actually returned. HTML can be returned instead # if e.g. virtuoso errors on the backend (due to spaces in the search # string, for example). try : results = r . json () except ValueError as e : # Try to give a more understandable error to user when the response # is not JSON... raise ValueError ( \"The server returned HTML instead of the requested JSON. \" \"This is usually caused by the triple store (e.g. virtuoso) \" \"throwing an error for the given search query.\" ) from e bindings = results [ \"results\" ][ \"bindings\" ] if not bindings : has_results = False page_number += page_number for result in bindings : yield self . _parse_search_result ( result ) @staticmethod def _parse_search_result ( result : dict ): \"\"\" Parse a nanopub search result (i.e. referring to one matching nanopublication). Rename 'v' to 'description', select only date, np, label and description fields and unnest them. \"\"\" parsed = dict () parsed [ \"np\" ] = result [ \"np\" ][ \"value\" ] if \"v\" in result : parsed [ \"description\" ] = result [ \"v\" ][ \"value\" ] elif \"description\" in result : parsed [ \"description\" ] = result [ \"description\" ][ \"value\" ] else : parsed [ \"description\" ] = \"\" if \"label\" in result : parsed [ \"label\" ] = result [ \"label\" ][ \"value\" ] parsed [ \"date\" ] = result [ \"date\" ][ \"value\" ] return parsed","title":"NanopubClient"},{"location":"reference/client/#nanopub.client.NanopubClient.find_nanopubs_with_pattern","text":"Pattern search. Search the nanopub servers for any nanopubs matching the given RDF pattern. You can leave parts of the triple to match anything by not specifying subj, pred, or obj arguments. Parameters: Name Type Description Default subj str URI of the subject that you want to match triples on. None pred str URI of the predicate that you want to match triples on. None obj str URI of the object that you want to match triples on. None pubkey str Public key that the matching nanopubs should be signed with None filter_retracted bool Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. True Yields: Type Description dicts depicting matching nanopublications. Each dict holds: \u2018np\u2019: the nanopublication uri, \u2018date\u2019: date of creation of the nanopublication, \u2018description\u2019: A description of the nanopublication (if found in RDF). Source code in nanopub/client.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 def find_nanopubs_with_pattern ( self , subj : str = None , pred : str = None , obj : str = None , filter_retracted : bool = True , pubkey : str = None , ): \"\"\"Pattern search. Search the nanopub servers for any nanopubs matching the given RDF pattern. You can leave parts of the triple to match anything by not specifying subj, pred, or obj arguments. Args: subj (str): URI of the subject that you want to match triples on. pred (str): URI of the predicate that you want to match triples on. obj (str): URI of the object that you want to match triples on. pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" params = {} endpoint = \"find_signed_nanopubs_with_pattern\" if subj : params [ \"subj\" ] = subj if pred : params [ \"pred\" ] = pred if obj : params [ \"obj\" ] = obj if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_nanopubs_with_pattern\" yield from self . _search ( endpoint = endpoint , params = params )","title":"find_nanopubs_with_pattern()"},{"location":"reference/client/#nanopub.client.NanopubClient.find_nanopubs_with_text","text":"Text search. Search the nanopub servers for any nanopubs matching the given search text. Parameters: Name Type Description Default text str The text to search on required pubkey str Public key that the matching nanopubs should be signed with None filter_retracted bool Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. True Yields: Type Description dicts depicting matching nanopublications. Each dict holds: \u2018np\u2019: the nanopublication uri, \u2018date\u2019: date of creation of the nanopublication, \u2018description\u2019: A description of the nanopublication (if found in RDF). Source code in nanopub/client.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def find_nanopubs_with_text ( self , text : str , pubkey : str = None , filter_retracted : bool = True ): \"\"\"Text search. Search the nanopub servers for any nanopubs matching the given search text. Args: text (str): The text to search on pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" if len ( text ) == 0 : return [] endpoint = \"find_signed_nanopubs_with_text\" params = { \"text\" : text , \"graphpred\" : \"\" , \"month\" : \"\" , \"day\" : \"\" , \"year\" : \"\" } if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_nanopubs_with_text\" return self . _search ( endpoint = endpoint , params = params )","title":"find_nanopubs_with_text()"},{"location":"reference/client/#nanopub.client.NanopubClient.find_retractions_of","text":"Find retractions of given URI Find all nanopublications that retract a certain nanopublication. Parameters: Name Type Description Default source str or nanopub.Publication URI or Nanopub object to find retractions for required valid_only bool Toggle returning only valid retractions, i.e. retractions that are signed with the same public key as the publication they retract. Default is True. True Returns: Type Description List [ str ] List of uris that retract the given URI Source code in nanopub/client.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 def find_retractions_of ( self , source : Union [ str , Nanopub ], valid_only = True ) -> List [ str ]: \"\"\"Find retractions of given URI Find all nanopublications that retract a certain nanopublication. Args: source (str or nanopub.Publication): URI or Nanopub object to find retractions for valid_only (bool): Toggle returning only valid retractions, i.e. retractions that are signed with the same public key as the publication they retract. Default is True. Returns: List of uris that retract the given URI \"\"\" if isinstance ( source , Nanopub ): if source . is_test_publication and not self . use_test_server : warnings . warn ( \"You are trying to find retractions on the production server, \" \"whereas this publication lives on the test server\" ) elif not source . is_test_publication and self . use_test_server : warnings . warn ( \"You are trying to find retractions on the test server, \" \"whereas this publication lives on the production server\" ) uri = source . source_uri else : uri = source if valid_only : source_publication = Nanopub ( source_uri = uri , conf = NanopubConf ( use_test_server = self . use_test_server ) ) public_key = source_publication . signed_with_public_key if public_key is None : raise ValueError ( \"The source publication is not signed with a public key\" ) else : public_key = None results = self . find_nanopubs_with_pattern ( pred = namespaces . NPX . retracts , obj = rdflib . URIRef ( uri ), pubkey = public_key , filter_retracted = False , ) return [ result [ \"np\" ] for result in results ]","title":"find_retractions_of()"},{"location":"reference/client/#nanopub.client.NanopubClient.find_things","text":"Search things (experimental). Search for any nanopublications that introduce a concept of the given type, that contain text with the given search term. Parameters: Name Type Description Default type str A URI denoting the type of the introduced concept required searchterm str The term that you want to search on ' ' pubkey str Public key that the matching nanopubs should be signed with None filter_retracted bool Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. True Yields: Type Description dicts depicting matching nanopublications. Each dict holds: \u2018np\u2019: the nanopublication uri, \u2018date\u2019: date of creation of the nanopublication, \u2018description\u2019: A description of the nanopublication (if found in RDF). Source code in nanopub/client.py 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 def find_things ( self , type : str , searchterm : str = \" \" , pubkey : str = None , filter_retracted : bool = True , ): \"\"\"Search things (experimental). Search for any nanopublications that introduce a concept of the given type, that contain text with the given search term. Args: type (str): A URI denoting the type of the introduced concept searchterm (str): The term that you want to search on pubkey (str): Public key that the matching nanopubs should be signed with filter_retracted (bool): Toggle filtering for publications that are retracted. Default is True, returning only publications that are not retracted. Yields: dicts depicting matching nanopublications. Each dict holds: 'np': the nanopublication uri, 'date': date of creation of the nanopublication, 'description': A description of the nanopublication (if found in RDF). \"\"\" if searchterm == \"\" : raise ValueError ( f \"Searchterm can not be an empty string: { searchterm } \" ) endpoint = \"find_signed_things\" params = dict () params [ \"type\" ] = type params [ \"searchterm\" ] = searchterm if pubkey : params [ \"pubkey\" ] = pubkey if filter_retracted : endpoint = \"find_valid_signed_things\" yield from self . _search ( endpoint = endpoint , params = params )","title":"find_things()"},{"location":"reference/config/","text":"NanopubConf Represents the configuration for nanopubs. Parameters: Name Type Description Default profile Optional [ Profile ] Profile of the user publishing the nanopub None use_test_server bool A boolean to automatically use the test server False use_server str The URL of the server that will be used to publish the nanopub NANOPUB_SERVER_LIST[0] add_prov_generated_time bool add generated time to provenance False add_pubinfo_generated_time bool add generated time to pubinfo False attribute_assertion_to_profile bool bool False attribute_publication_to_profile bool bool False assertion_attributed_to Optional [ str ] Optional str None publication_attributed_to Optional [ str ] Optional str None derived_from Optional [ str ] Optional str None Source code in nanopub/nanopub_conf.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @dataclass class NanopubConf : \"\"\"Represents the configuration for nanopubs. Args: profile: Profile of the user publishing the nanopub use_test_server: A boolean to automatically use the test server use_server: The URL of the server that will be used to publish the nanopub add_prov_generated_time: add generated time to provenance add_pubinfo_generated_time: add generated time to pubinfo attribute_assertion_to_profile: bool attribute_publication_to_profile: bool assertion_attributed_to: Optional str publication_attributed_to: Optional str derived_from: Optional str \"\"\" profile : Optional [ Profile ] = None use_test_server : bool = False use_server : str = NANOPUB_SERVER_LIST [ 0 ] add_prov_generated_time : bool = False add_pubinfo_generated_time : bool = False attribute_assertion_to_profile : bool = False attribute_publication_to_profile : bool = False assertion_attributed_to : Optional [ str ] = None publication_attributed_to : Optional [ str ] = None derived_from : Optional [ str ] = None dict = asdict","title":"Config"},{"location":"reference/config/#nanopubconf","text":"Represents the configuration for nanopubs. Parameters: Name Type Description Default profile Optional [ Profile ] Profile of the user publishing the nanopub None use_test_server bool A boolean to automatically use the test server False use_server str The URL of the server that will be used to publish the nanopub NANOPUB_SERVER_LIST[0] add_prov_generated_time bool add generated time to provenance False add_pubinfo_generated_time bool add generated time to pubinfo False attribute_assertion_to_profile bool bool False attribute_publication_to_profile bool bool False assertion_attributed_to Optional [ str ] Optional str None publication_attributed_to Optional [ str ] Optional str None derived_from Optional [ str ] Optional str None Source code in nanopub/nanopub_conf.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @dataclass class NanopubConf : \"\"\"Represents the configuration for nanopubs. Args: profile: Profile of the user publishing the nanopub use_test_server: A boolean to automatically use the test server use_server: The URL of the server that will be used to publish the nanopub add_prov_generated_time: add generated time to provenance add_pubinfo_generated_time: add generated time to pubinfo attribute_assertion_to_profile: bool attribute_publication_to_profile: bool assertion_attributed_to: Optional str publication_attributed_to: Optional str derived_from: Optional str \"\"\" profile : Optional [ Profile ] = None use_test_server : bool = False use_server : str = NANOPUB_SERVER_LIST [ 0 ] add_prov_generated_time : bool = False add_pubinfo_generated_time : bool = False attribute_assertion_to_profile : bool = False attribute_publication_to_profile : bool = False assertion_attributed_to : Optional [ str ] = None publication_attributed_to : Optional [ str ] = None derived_from : Optional [ str ] = None dict = asdict","title":"NanopubConf"},{"location":"reference/namespaces/","text":"Namespaces This module holds handy namespaces that are often used in nanopublications. HYCL = Namespace ( 'http://purl.org/petapico/o/hycl#' ) module-attribute HYCL namespace for claims and hypothesis NP = Namespace ( 'http://www.nanopub.org/nschema#' ) module-attribute Nanopub namespace NPX = Namespace ( 'http://purl.org/nanopub/x/' ) module-attribute Nanopub/x namespace NTEMPLATE = Namespace ( 'https://w3id.org/np/o/ntemplate/' ) module-attribute Nanopub template namespace ORCID = Namespace ( 'https://orcid.org/' ) module-attribute ORCID namespace PAV = Namespace ( 'http://purl.org/pav/' ) module-attribute Provenance And Versioning namespace PMID = Namespace ( 'http://www.ncbi.nlm.nih.gov/pubmed/' ) module-attribute PubMed namespace PROV = Namespace ( 'http://www.w3.org/ns/prov#' ) module-attribute Provenance Ontogoly (PROV-O) namespace","title":"Namespaces"},{"location":"reference/namespaces/#namespaces","text":"This module holds handy namespaces that are often used in nanopublications.","title":"Namespaces"},{"location":"reference/namespaces/#nanopub.namespaces.HYCL","text":"HYCL namespace for claims and hypothesis","title":"HYCL"},{"location":"reference/namespaces/#nanopub.namespaces.NP","text":"Nanopub namespace","title":"NP"},{"location":"reference/namespaces/#nanopub.namespaces.NPX","text":"Nanopub/x namespace","title":"NPX"},{"location":"reference/namespaces/#nanopub.namespaces.NTEMPLATE","text":"Nanopub template namespace","title":"NTEMPLATE"},{"location":"reference/namespaces/#nanopub.namespaces.ORCID","text":"ORCID namespace","title":"ORCID"},{"location":"reference/namespaces/#nanopub.namespaces.PAV","text":"Provenance And Versioning namespace","title":"PAV"},{"location":"reference/namespaces/#nanopub.namespaces.PMID","text":"PubMed namespace","title":"PMID"},{"location":"reference/namespaces/#nanopub.namespaces.PROV","text":"Provenance Ontogoly (PROV-O) namespace","title":"PROV"},{"location":"reference/nanopub/","text":"Nanopub A Nanopub object, containing: the RDF that defines the nanopublication; configuration for formatting and publishing the nanopub; functions for validating, signing, publishing Attributes: Name Type Description config NanopubConfig Config for the nanopub rdf rdflib . ConjunctiveGraph The full RDF graph of this nanopublication (quads) assertion rdflib . Graph The part of the graph describing the assertion. pubinfo rdflib . Graph The part of the graph describing the publication information. provenance rdflib . Graph The part of the graph describing the provenance. source_uri str The URI of the nanopublication that this Publication represents (if applicable) introduces_concept rdflib . BNode The concept that is introduced by this Publication (if applicable) Source code in nanopub/nanopub.pyclass Nanopub : \"\"\"A Nanopub object, containing: the RDF that defines the nanopublication; configuration for formatting and publishing the nanopub; functions for validating, signing, publishing Attributes: config (NanopubConfig): Config for the nanopub rdf (rdflib.ConjunctiveGraph): The full RDF graph of this nanopublication (quads) assertion (rdflib.Graph): The part of the graph describing the assertion. pubinfo (rdflib.Graph): The part of the graph describing the publication information. provenance (rdflib.Graph): The part of the graph describing the provenance. source_uri (str): The URI of the nanopublication that this Publication represents (if applicable) introduces_concept (rdflib.BNode): The concept that is introduced by this Publication (if applicable) \"\"\" def __init__ ( self , source_uri : str = None , assertion : Graph = Graph (), provenance : Graph = Graph (), pubinfo : Graph = Graph (), rdf : Union [ ConjunctiveGraph , Path ] = None , introduces_concept : BNode = None , conf : NanopubConf = NanopubConf (), ) -> None : self . _profile = conf . profile self . _source_uri = source_uri self . _concept_uri = None self . _conf = deepcopy ( conf ) self . _metadata = NanopubMetadata () self . _published = False if self . _conf . use_test_server : self . _conf . use_server = NANOPUB_TEST_SERVER if self . _conf . use_server == NANOPUB_TEST_SERVER : self . _conf . use_test_server = True # Get the nanopub RDF depending on how it is provided: # source URI, rdflib graph, or file if source_uri : # If source URI provided we retrieve the nanopub from the servers r = requests . get ( source_uri + \".\" + NANOPUB_FETCH_FORMAT ) if not r . ok and self . _conf . use_test_server : nanopub_id = source_uri . rsplit ( \"/\" , 1 )[ - 1 ] uri_test = NANOPUB_TEST_SERVER + nanopub_id r = requests . get ( uri_test + \".\" + NANOPUB_FETCH_FORMAT ) r . raise_for_status () self . _rdf = self . _preformat_graph ( ConjunctiveGraph ()) self . _rdf . parse ( data = r . text , format = NANOPUB_FETCH_FORMAT ) self . _metadata = extract_np_metadata ( self . _rdf ) else : # if provided as rdflib graph, or file if isinstance ( rdf , ConjunctiveGraph ): self . _rdf = self . _preformat_graph ( rdf ) self . _metadata = extract_np_metadata ( self . _rdf ) elif isinstance ( rdf , Path ): self . _rdf = self . _preformat_graph ( ConjunctiveGraph ()) self . _rdf . parse ( rdf ) self . _metadata = extract_np_metadata ( self . _rdf ) else : self . _rdf = self . _preformat_graph ( ConjunctiveGraph ()) # Instantiate the different graph from the provided RDF (trig/nquads) self . _head = Graph ( self . _rdf . store , self . _metadata . head ) self . _assertion = Graph ( self . _rdf . store , self . _metadata . assertion ) self . _provenance = Graph ( self . _rdf . store , self . _metadata . provenance ) self . _pubinfo = Graph ( self . _rdf . store , self . _metadata . pubinfo ) self . _assertion += assertion self . _provenance += provenance self . _pubinfo += pubinfo # Concatenate prefixes declarations from all provided graphs in the main graph for user_rdf in [ assertion , provenance , pubinfo ]: if user_rdf is not None : for prefix , namespace in user_rdf . namespaces (): self . _rdf . bind ( prefix , namespace ) # Add Head graph if the nanopub was not provided as trig/nquads if not rdf and not source_uri : self . _head . add (( self . _metadata . namespace [ \"\" ], RDF . type , NP . Nanopublication )) self . _head . add (( self . _metadata . namespace [ \"\" ], NP . hasAssertion , self . _assertion . identifier , )) self . _head . add (( self . _metadata . namespace [ \"\" ], NP . hasProvenance , self . _provenance . identifier , )) self . _head . add (( self . _metadata . namespace [ \"\" ], NP . hasPublicationInfo , self . _pubinfo . identifier , )) # Add triples to the nanopub depending on the provided NanopuConf (e.g. creator, date) self . _validate_nanopub_arguments ( introduces_concept = introduces_concept , derived_from = self . _conf . derived_from , assertion_attributed_to = self . _conf . assertion_attributed_to , attribute_assertion_to_profile = self . _conf . attribute_assertion_to_profile , # publication_attributed_to=publication_attributed_to, ) self . _handle_generated_at_time ( self . _conf . add_pubinfo_generated_time , self . _conf . add_prov_generated_time ) assertion_attributed_to = self . _conf . assertion_attributed_to if self . _conf . attribute_assertion_to_profile : assertion_attributed_to = rdflib . URIRef ( self . profile . orcid_id ) self . _handle_assertion_attributed_to ( assertion_attributed_to ) self . _handle_publication_attributed_to ( self . _conf . attribute_publication_to_profile , self . _conf . publication_attributed_to ) self . _handle_derived_from ( derived_from = self . _conf . derived_from ) def _preformat_graph ( self , g : ConjunctiveGraph ) -> ConjunctiveGraph : \"\"\"Add a few default namespaces\"\"\" g . bind ( \"np\" , NP ) g . bind ( \"npx\" , NPX ) g . bind ( \"prov\" , PROV ) g . bind ( \"pav\" , PAV ) g . bind ( \"hycl\" , HYCL ) g . bind ( \"dc\" , DC ) g . bind ( \"dcterms\" , DCTERMS ) g . bind ( \"orcid\" , ORCID ) g . bind ( \"ntemplate\" , NTEMPLATE ) g . bind ( \"foaf\" , FOAF ) # g = self._replace_blank_nodes(g) return g def update_from_signed ( self , signed_g : ConjunctiveGraph ) -> None : \"\"\"Update the pub RDF to the signed one\"\"\" self . _metadata = extract_np_metadata ( signed_g ) if self . _metadata . trusty : self . _source_uri = str ( self . _metadata . np_uri ) # self._source_uri = self.get_source_uri_from_graph self . _rdf = signed_g self . _head = Graph ( self . _rdf . store , self . _metadata . head ) self . _assertion = Graph ( self . _rdf . store , self . _metadata . assertion ) self . _provenance = Graph ( self . _rdf . store , self . _metadata . provenance ) self . _pubinfo = Graph ( self . _rdf . store , self . _metadata . pubinfo ) def sign ( self ) -> None : \"\"\"Sign a Nanopub object\"\"\" if len ( self . rdf ) > MAX_TRIPLES_PER_NANOPUB : raise MalformedNanopubError ( f \"Nanopublication contains { len ( self . rdf ) } triples, which is more than the { MAX_TRIPLES_PER_NANOPUB } authorized\" ) if not self . _conf . profile : raise ProfileError ( \"Profile not available, cannot sign the nanopub\" ) if self . _metadata . signature : raise MalformedNanopubError ( f \"The nanopub have already been signed: { self . source_uri } \" ) if self . is_valid : signed_g = add_signature ( self . rdf , self . _conf . profile , self . _metadata . namespace , URIRef ( str ( self . _pubinfo . identifier ))) self . update_from_signed ( signed_g ) log . info ( f \"Signed { self . source_uri } \" ) else : raise MalformedNanopubError ( \"The nanopub is not valid, cannot sign it\" ) def publish ( self ) -> None : \"\"\"Publish a Nanopub object\"\"\" if not self . source_uri : self . sign () publish_graph ( self . rdf , use_server = self . _conf . use_server ) log . info ( f 'Published { self . source_uri } to { self . _conf . use_server } ' ) self . published = True if self . introduces_concept : concept_uri = str ( self . introduces_concept ) # Replace the DUMMY_NANOPUB_URI with the actually published nanopub uri. This is # necessary if a blank node was passed as introduces_concept. In that case the # Nanopub.from_assertion method replaces the blank node with the base nanopub's URI # and appends a fragment, given by the 'name' of the blank node. For example, if a # blank node with name 'step' was passed as introduces_concept, the concept will be # published with a URI that looks like [published nanopub URI]#step. concept_uri = concept_uri . replace ( DUMMY_NANOPUB_URI , self . source_uri ) self . concept_uri = concept_uri log . info ( f \"Published concept to { concept_uri } \" ) def update ( self , publish = True ) -> None : \"\"\"Re-publish an updated Nanopub object\"\"\" self . _pubinfo . add (( URIRef ( self . source_uri ), NPX . supersedes , URIRef ( self . source_uri ), )) self . _pubinfo . remove (( self . _metadata . sig_uri , None , None , )) self . _metadata = extract_np_metadata ( self . _rdf ) print ( self . _metadata ) if publish : self . publish () else : self . sign () def store ( self , filepath : Path , format : str = 'trig' ) -> None : \"\"\"Store the Nanopub object at the given path\"\"\" self . _rdf . serialize ( filepath , format = format ) @property def has_valid_signature ( self ) -> bool : verify_signature ( self . _rdf , self . _metadata . namespace ) return True @property def has_valid_trusty ( self ) -> bool : verify_trusty ( self . _rdf , self . source_uri , self . _metadata . namespace ) return True @property def is_valid ( self ) -> bool : \"\"\"Check if a nanopublication is valid\"\"\" np_meta = extract_np_metadata ( self . _rdf ) np_uri = np_meta . np_uri # Check if any of the graph is empty if len ( self . _head ) < 1 : raise MalformedNanopubError ( \"The Head graph is empty\" ) if len ( self . _assertion ) < 1 : raise MalformedNanopubError ( \"The assertion graph is empty\" ) if len ( self . _provenance ) < 1 : raise MalformedNanopubError ( \"The provenance graph is empty\" ) if len ( self . _pubinfo ) < 1 : raise MalformedNanopubError ( \"The pubinfo graph is empty\" ) # Check exactly 4 graphs graph_count = 0 for c in self . _rdf . contexts (): if len ( list ( self . _rdf . quads (( None , None , None , c )))) > 0 : graph_count += 1 if graph_count != 4 : raise MalformedNanopubError ( f \" \\033 [1mToo many graphs found \\033 [0m in the provided RDF: { graph_count } . A Nanopub should have only 4 graphs (Head, assertion, provenance, pubinfo)\" ) found_prov = False for s , p , o in self . _provenance : if str ( s ) == str ( np_meta . assertion ): found_prov = True break if not found_prov : raise MalformedNanopubError ( f \"The provenance graph should contain at least one triple with the assertion graph URI as subject: \\033 [1m { np_meta . assertion } \\033 [0m\" ) found_pubinfo = False for s , p , o in self . _pubinfo : if str ( s ) == str ( np_uri ) or str ( s ) == str ( np_meta . namespace ): found_pubinfo = True break if not found_pubinfo : raise MalformedNanopubError ( f \"The pubinfo graph should contain at least one triple that has the nanopub URI as subject: \\033 [1m { np_uri } \\033 [0m\" ) # TODO: add more checks for trusty and signature # if self._metadata.signature: # if self.has_valid_signature is False: # raise MalformedNanopubError(\"The nanopub is not valid\") return True @property def rdf ( self ) -> ConjunctiveGraph : return self . _rdf @property def head ( self ): return self . _head @property def assertion ( self ): return self . _assertion @property def provenance ( self ): return self . _provenance @property def pubinfo ( self ): return self . _pubinfo @property def metadata ( self ): return self . _metadata @property def conf ( self ): return self . _conf @conf . setter def conf ( self , value ): self . _conf = value @property def source_uri ( self ): # return self._source_uri if self . _source_uri : return self . _source_uri else : return self . get_source_uri_from_graph @source_uri . setter def source_uri ( self , value ): self . _source_uri = value @property def published ( self ): return self . _published @published . setter def published ( self , value ): self . _published = value @property def concept_uri ( self ): return self . _concept_uri @concept_uri . setter def concept_uri ( self , value ): self . _concept_uri = value @property def profile ( self ): return self . _profile @profile . setter def profile ( self , value ): self . _profile = value @property def namespace ( self ): return self . _metadata . namespace @property def introduces_concept ( self ): concepts_introduced = list () for s , p , o in self . _pubinfo . triples (( None , NPX . introduces , None )): concepts_introduced . append ( o ) if len ( concepts_introduced ) == 0 : return None elif len ( concepts_introduced ) == 1 : return concepts_introduced [ 0 ] else : raise MalformedNanopubError ( \"Nanopub introduces multiple concepts\" ) @property def get_source_uri_from_graph ( self ) -> Optional [ str ]: \"\"\"Get the source URI of the nanopublication from the header. This is usually something like: http://purl.org/np/RAnksi2yDP7jpe7F6BwWCpMOmzBEcUImkAKUeKEY_2Yus \"\"\" for s in self . _rdf . subjects ( rdflib . RDF . type , NP . Nanopublication ): extract_trusty = re . search ( r '^[a-z0-9+.-]+:\\/\\/[a-zA-Z0-9\\/._-]+\\/(RA.*)$' , str ( s ), re . IGNORECASE ) if extract_trusty : return str ( s ) return None @property def signed_with_public_key ( self ) -> Optional [ str ]: np_sig = extract_np_metadata ( self . _rdf ) if np_sig . public_key : return np_sig . public_key return None @property def is_test_publication ( self ) -> bool : return self . _conf . use_test_server def __str__ ( self ) -> str : s = \"\" if self . _source_uri : s += f \"Nanopub URI: \\033 [1m { self . _source_uri } \\033 [0m \\n \" s += self . _rdf . serialize ( format = 'trig' ) return s def _handle_generated_at_time ( self , add_pubinfo_generated_time : bool , add_prov_generated_time : bool ) -> None : \"\"\"Handler for `Nanopub` constructor.\"\"\" creationtime = rdflib . Literal ( datetime . now (), datatype = XSD . dateTime ) if add_pubinfo_generated_time : self . _pubinfo . add ( ( self . _metadata . namespace [ \"\" ], PROV . generatedAtTime , creationtime ) ) if add_prov_generated_time : self . _provenance . add ( ( self . _assertion . identifier , PROV . generatedAtTime , creationtime , ) ) def _handle_assertion_attributed_to ( self , assertion_attributed_to : Optional [ str ]) -> None : \"\"\"Handler for `Nanopub` constructor.\"\"\" if assertion_attributed_to : assertion_attributed_to = URIRef ( assertion_attributed_to ) self . _provenance . add ( ( self . _assertion . identifier , PROV . wasAttributedTo , assertion_attributed_to , ) ) def _handle_publication_attributed_to ( self , attribute_publication_to_profile : bool , publication_attributed_to : Optional [ str ], ) -> None : \"\"\"Handler for `Nanopub` constructor.\"\"\" if attribute_publication_to_profile : if not self . _profile : raise MalformedNanopubError ( \"No nanopub profile provided, but attribute_publication_to_profile is enabled\" ) if publication_attributed_to is None : publication_attributed_to = rdflib . URIRef ( self . _profile . orcid_id ) else : publication_attributed_to = rdflib . URIRef ( publication_attributed_to ) self . _pubinfo . add ( ( self . _metadata . namespace [ \"\" ], PROV . wasAttributedTo , publication_attributed_to , ) ) def _handle_derived_from ( self , derived_from : Optional [ str ]): \"\"\"Handler for `Nanopub` constructor.\"\"\" if derived_from : if isinstance ( derived_from , list ): list_of_uris = derived_from else : list_of_uris = [ derived_from ] for derived_from_uri in list_of_uris : derived_from_uri = rdflib . URIRef ( derived_from_uri ) self . _provenance . add (( self . _assertion . identifier , PROV . wasDerivedFrom , derived_from_uri , )) def _handle_introduces_concept ( self , introduces_concept : Union [ BNode , URIRef ]): \"\"\"Handler for `Nanopub` constructor.\"\"\" if introduces_concept : introduces_concept = self . _metadata . namespace [ str ( introduces_concept )] self . _pubinfo . add ( ( self . _metadata . namespace [ \"\" ], NPX . introduces , introduces_concept ) ) def _validate_nanopub_arguments ( self , derived_from : Optional [ str ], assertion_attributed_to : Optional [ str ], attribute_assertion_to_profile : bool , introduces_concept : Optional [ BNode ], ) -> None : \"\"\" Validate arguments method. \"\"\" if assertion_attributed_to and attribute_assertion_to_profile : raise MalformedNanopubError ( \"If you pass a URI for the assertion_attributed_to argument, you cannot pass \" \"attribute_assertion_to_profile=True, because the assertion will already be \" \"attributed to the value passed in assertion_attributed_to argument. Set \" \"attribute_assertion_to_profile=False or do not pass the assertion_attributed_to \" \"argument.\" ) if introduces_concept and not isinstance ( introduces_concept , BNode ): raise MalformedNanopubError ( \"If you want a nanopublication to introduce a concept, you need to \" 'pass it as an rdflib.term.BNode(\"concept_name\"). This will make ' \"sure it is referred to from the nanopublication uri namespace upon \" \"publishing.\" ) if self . _provenance : if ( derived_from and ( None , PROV . wasDerivedFrom , None ) in self . _provenance ): raise MalformedNanopubError ( \"The provenance_rdf that you passed already contains the \" \"prov:wasDerivedFrom predicate, so you cannot also use the \" \"derived_from argument\" ) if ( assertion_attributed_to and ( None , PROV . wasAttributedTo , None ) in self . _provenance ): raise MalformedNanopubError ( \"The provenance_rdf that you passed already contains the \" \"prov:wasAttributedTo predicate, so you cannot also use the \" \"assertion_attributed_to argument\" ) if ( attribute_assertion_to_profile and ( None , PROV . wasAttributedTo , None ) in self . _provenance ): raise MalformedNanopubError ( \"The provenance_rdf that you passed already contains the \" \"prov:wasAttributedTo predicate, so you cannot also use the \" \"attribute_assertion_to_profile argument\" ) if self . _pubinfo : if ( introduces_concept and ( None , NPX . introduces , None ) in self . _pubinfo ): raise MalformedNanopubError ( \"The pubinfo_rdf that you passed already contains the \" \"npx:introduces predicate, so you cannot also use the \" \"introduces_concept argument\" ) get_source_uri_from_graph : Optional [ str ] property Get the source URI of the nanopublication from the header. This is usually something like: http://purl.org/np/RAnksi2yDP7jpe7F6BwWCpMOmzBEcUImkAKUeKEY_2Yus is_valid : bool property Check if a nanopublication is valid publish () Publish a Nanopub object Source code in nanopub/nanopub.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 def publish ( self ) -> None : \"\"\"Publish a Nanopub object\"\"\" if not self . source_uri : self . sign () publish_graph ( self . rdf , use_server = self . _conf . use_server ) log . info ( f 'Published { self . source_uri } to { self . _conf . use_server } ' ) self . published = True if self . introduces_concept : concept_uri = str ( self . introduces_concept ) # Replace the DUMMY_NANOPUB_URI with the actually published nanopub uri. This is # necessary if a blank node was passed as introduces_concept. In that case the # Nanopub.from_assertion method replaces the blank node with the base nanopub's URI # and appends a fragment, given by the 'name' of the blank node. For example, if a # blank node with name 'step' was passed as introduces_concept, the concept will be # published with a URI that looks like [published nanopub URI]#step. concept_uri = concept_uri . replace ( DUMMY_NANOPUB_URI , self . source_uri ) self . concept_uri = concept_uri log . info ( f \"Published concept to { concept_uri } \" ) sign () Sign a Nanopub object Source code in nanopub/nanopub.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 def sign ( self ) -> None : \"\"\"Sign a Nanopub object\"\"\" if len ( self . rdf ) > MAX_TRIPLES_PER_NANOPUB : raise MalformedNanopubError ( f \"Nanopublication contains { len ( self . rdf ) } triples, which is more than the { MAX_TRIPLES_PER_NANOPUB } authorized\" ) if not self . _conf . profile : raise ProfileError ( \"Profile not available, cannot sign the nanopub\" ) if self . _metadata . signature : raise MalformedNanopubError ( f \"The nanopub have already been signed: { self . source_uri } \" ) if self . is_valid : signed_g = add_signature ( self . rdf , self . _conf . profile , self . _metadata . namespace , URIRef ( str ( self . _pubinfo . identifier ))) self . update_from_signed ( signed_g ) log . info ( f \"Signed { self . source_uri } \" ) else : raise MalformedNanopubError ( \"The nanopub is not valid, cannot sign it\" ) store ( filepath , format = 'trig' ) Store the Nanopub object at the given path Source code in nanopub/nanopub.py 237 238 239 def store ( self , filepath : Path , format : str = 'trig' ) -> None : \"\"\"Store the Nanopub object at the given path\"\"\" self . _rdf . serialize ( filepath , format = format ) update ( publish = True ) Re-publish an updated Nanopub object Source code in nanopub/nanopub.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 def update ( self , publish = True ) -> None : \"\"\"Re-publish an updated Nanopub object\"\"\" self . _pubinfo . add (( URIRef ( self . source_uri ), NPX . supersedes , URIRef ( self . source_uri ), )) self . _pubinfo . remove (( self . _metadata . sig_uri , None , None , )) self . _metadata = extract_np_metadata ( self . _rdf ) print ( self . _metadata ) if publish : self . publish () else : self . sign () update_from_signed ( signed_g ) Update the pub RDF to the signed one Source code in nanopub/nanopub.py 163 164 165 166 167 168 169 170 171 172 173 def update_from_signed ( self , signed_g : ConjunctiveGraph ) -> None : \"\"\"Update the pub RDF to the signed one\"\"\" self . _metadata = extract_np_metadata ( signed_g ) if self . _metadata . trusty : self . _source_uri = str ( self . _metadata . np_uri ) # self._source_uri = self.get_source_uri_from_graph self . _rdf = signed_g self . _head = Graph ( self . _rdf . store , self . _metadata . head ) self . _assertion = Graph ( self . _rdf . store , self . _metadata . assertion ) self . _provenance = Graph ( self . _rdf . store , self . _metadata . provenance ) self . _pubinfo = Graph ( self . _rdf . store , self . _metadata . pubinfo )","title":"Nanopub"},{"location":"reference/nanopub/#nanopub","text":"A Nanopub object, containing: the RDF that defines the nanopublication; configuration for formatting and publishing the nanopub; functions for validating, signing, publishing Attributes: Name Type Description config NanopubConfig Config for the nanopub rdf rdflib . ConjunctiveGraph The full RDF graph of this nanopublication (quads) assertion rdflib . Graph The part of the graph describing the assertion. pubinfo rdflib . Graph The part of the graph describing the publication information. provenance rdflib . Graph The part of the graph describing the provenance. source_uri str The URI of the nanopublication that this Publication represents (if applicable) introduces_concept rdflib . BNode The concept that is introduced by this Publication (if applicable) Source code in nanopub/nanopub.pyclass Nanopub : \"\"\"A Nanopub object, containing: the RDF that defines the nanopublication; configuration for formatting and publishing the nanopub; functions for validating, signing, publishing Attributes: config (NanopubConfig): Config for the nanopub rdf (rdflib.ConjunctiveGraph): The full RDF graph of this nanopublication (quads) assertion (rdflib.Graph): The part of the graph describing the assertion. pubinfo (rdflib.Graph): The part of the graph describing the publication information. provenance (rdflib.Graph): The part of the graph describing the provenance. source_uri (str): The URI of the nanopublication that this Publication represents (if applicable) introduces_concept (rdflib.BNode): The concept that is introduced by this Publication (if applicable) \"\"\" def __init__ ( self , source_uri : str = None , assertion : Graph = Graph (), provenance : Graph = Graph (), pubinfo : Graph = Graph (), rdf : Union [ ConjunctiveGraph , Path ] = None , introduces_concept : BNode = None , conf : NanopubConf = NanopubConf (), ) -> None : self . _profile = conf . profile self . _source_uri = source_uri self . _concept_uri = None self . _conf = deepcopy ( conf ) self . _metadata = NanopubMetadata () self . _published = False if self . _conf . use_test_server : self . _conf . use_server = NANOPUB_TEST_SERVER if self . _conf . use_server == NANOPUB_TEST_SERVER : self . _conf . use_test_server = True # Get the nanopub RDF depending on how it is provided: # source URI, rdflib graph, or file if source_uri : # If source URI provided we retrieve the nanopub from the servers r = requests . get ( source_uri + \".\" + NANOPUB_FETCH_FORMAT ) if not r . ok and self . _conf . use_test_server : nanopub_id = source_uri . rsplit ( \"/\" , 1 )[ - 1 ] uri_test = NANOPUB_TEST_SERVER + nanopub_id r = requests . get ( uri_test + \".\" + NANOPUB_FETCH_FORMAT ) r . raise_for_status () self . _rdf = self . _preformat_graph ( ConjunctiveGraph ()) self . _rdf . parse ( data = r . text , format = NANOPUB_FETCH_FORMAT ) self . _metadata = extract_np_metadata ( self . _rdf ) else : # if provided as rdflib graph, or file if isinstance ( rdf , ConjunctiveGraph ): self . _rdf = self . _preformat_graph ( rdf ) self . _metadata = extract_np_metadata ( self . _rdf ) elif isinstance ( rdf , Path ): self . _rdf = self . _preformat_graph ( ConjunctiveGraph ()) self . _rdf . parse ( rdf ) self . _metadata = extract_np_metadata ( self . _rdf ) else : self . _rdf = self . _preformat_graph ( ConjunctiveGraph ()) # Instantiate the different graph from the provided RDF (trig/nquads) self . _head = Graph ( self . _rdf . store , self . _metadata . head ) self . _assertion = Graph ( self . _rdf . store , self . _metadata . assertion ) self . _provenance = Graph ( self . _rdf . store , self . _metadata . provenance ) self . _pubinfo = Graph ( self . _rdf . store , self . _metadata . pubinfo ) self . _assertion += assertion self . _provenance += provenance self . _pubinfo += pubinfo # Concatenate prefixes declarations from all provided graphs in the main graph for user_rdf in [ assertion , provenance , pubinfo ]: if user_rdf is not None : for prefix , namespace in user_rdf . namespaces (): self . _rdf . bind ( prefix , namespace ) # Add Head graph if the nanopub was not provided as trig/nquads if not rdf and not source_uri : self . _head . add (( self . _metadata . namespace [ \"\" ], RDF . type , NP . Nanopublication )) self . _head . add (( self . _metadata . namespace [ \"\" ], NP . hasAssertion , self . _assertion . identifier , )) self . _head . add (( self . _metadata . namespace [ \"\" ], NP . hasProvenance , self . _provenance . identifier , )) self . _head . add (( self . _metadata . namespace [ \"\" ], NP . hasPublicationInfo , self . _pubinfo . identifier , )) # Add triples to the nanopub depending on the provided NanopuConf (e.g. creator, date) self . _validate_nanopub_arguments ( introduces_concept = introduces_concept , derived_from = self . _conf . derived_from , assertion_attributed_to = self . _conf . assertion_attributed_to , attribute_assertion_to_profile = self . _conf . attribute_assertion_to_profile , # publication_attributed_to=publication_attributed_to, ) self . _handle_generated_at_time ( self . _conf . add_pubinfo_generated_time , self . _conf . add_prov_generated_time ) assertion_attributed_to = self . _conf . assertion_attributed_to if self . _conf . attribute_assertion_to_profile : assertion_attributed_to = rdflib . URIRef ( self . profile . orcid_id ) self . _handle_assertion_attributed_to ( assertion_attributed_to ) self . _handle_publication_attributed_to ( self . _conf . attribute_publication_to_profile , self . _conf . publication_attributed_to ) self . _handle_derived_from ( derived_from = self . _conf . derived_from ) def _preformat_graph ( self , g : ConjunctiveGraph ) -> ConjunctiveGraph : \"\"\"Add a few default namespaces\"\"\" g . bind ( \"np\" , NP ) g . bind ( \"npx\" , NPX ) g . bind ( \"prov\" , PROV ) g . bind ( \"pav\" , PAV ) g . bind ( \"hycl\" , HYCL ) g . bind ( \"dc\" , DC ) g . bind ( \"dcterms\" , DCTERMS ) g . bind ( \"orcid\" , ORCID ) g . bind ( \"ntemplate\" , NTEMPLATE ) g . bind ( \"foaf\" , FOAF ) # g = self._replace_blank_nodes(g) return g def update_from_signed ( self , signed_g : ConjunctiveGraph ) -> None : \"\"\"Update the pub RDF to the signed one\"\"\" self . _metadata = extract_np_metadata ( signed_g ) if self . _metadata . trusty : self . _source_uri = str ( self . _metadata . np_uri ) # self._source_uri = self.get_source_uri_from_graph self . _rdf = signed_g self . _head = Graph ( self . _rdf . store , self . _metadata . head ) self . _assertion = Graph ( self . _rdf . store , self . _metadata . assertion ) self . _provenance = Graph ( self . _rdf . store , self . _metadata . provenance ) self . _pubinfo = Graph ( self . _rdf . store , self . _metadata . pubinfo ) def sign ( self ) -> None : \"\"\"Sign a Nanopub object\"\"\" if len ( self . rdf ) > MAX_TRIPLES_PER_NANOPUB : raise MalformedNanopubError ( f \"Nanopublication contains { len ( self . rdf ) } triples, which is more than the { MAX_TRIPLES_PER_NANOPUB } authorized\" ) if not self . _conf . profile : raise ProfileError ( \"Profile not available, cannot sign the nanopub\" ) if self . _metadata . signature : raise MalformedNanopubError ( f \"The nanopub have already been signed: { self . source_uri } \" ) if self . is_valid : signed_g = add_signature ( self . rdf , self . _conf . profile , self . _metadata . namespace , URIRef ( str ( self . _pubinfo . identifier ))) self . update_from_signed ( signed_g ) log . info ( f \"Signed { self . source_uri } \" ) else : raise MalformedNanopubError ( \"The nanopub is not valid, cannot sign it\" ) def publish ( self ) -> None : \"\"\"Publish a Nanopub object\"\"\" if not self . source_uri : self . sign () publish_graph ( self . rdf , use_server = self . _conf . use_server ) log . info ( f 'Published { self . source_uri } to { self . _conf . use_server } ' ) self . published = True if self . introduces_concept : concept_uri = str ( self . introduces_concept ) # Replace the DUMMY_NANOPUB_URI with the actually published nanopub uri. This is # necessary if a blank node was passed as introduces_concept. In that case the # Nanopub.from_assertion method replaces the blank node with the base nanopub's URI # and appends a fragment, given by the 'name' of the blank node. For example, if a # blank node with name 'step' was passed as introduces_concept, the concept will be # published with a URI that looks like [published nanopub URI]#step. concept_uri = concept_uri . replace ( DUMMY_NANOPUB_URI , self . source_uri ) self . concept_uri = concept_uri log . info ( f \"Published concept to { concept_uri } \" ) def update ( self , publish = True ) -> None : \"\"\"Re-publish an updated Nanopub object\"\"\" self . _pubinfo . add (( URIRef ( self . source_uri ), NPX . supersedes , URIRef ( self . source_uri ), )) self . _pubinfo . remove (( self . _metadata . sig_uri , None , None , )) self . _metadata = extract_np_metadata ( self . _rdf ) print ( self . _metadata ) if publish : self . publish () else : self . sign () def store ( self , filepath : Path , format : str = 'trig' ) -> None : \"\"\"Store the Nanopub object at the given path\"\"\" self . _rdf . serialize ( filepath , format = format ) @property def has_valid_signature ( self ) -> bool : verify_signature ( self . _rdf , self . _metadata . namespace ) return True @property def has_valid_trusty ( self ) -> bool : verify_trusty ( self . _rdf , self . source_uri , self . _metadata . namespace ) return True @property def is_valid ( self ) -> bool : \"\"\"Check if a nanopublication is valid\"\"\" np_meta = extract_np_metadata ( self . _rdf ) np_uri = np_meta . np_uri # Check if any of the graph is empty if len ( self . _head ) < 1 : raise MalformedNanopubError ( \"The Head graph is empty\" ) if len ( self . _assertion ) < 1 : raise MalformedNanopubError ( \"The assertion graph is empty\" ) if len ( self . _provenance ) < 1 : raise MalformedNanopubError ( \"The provenance graph is empty\" ) if len ( self . _pubinfo ) < 1 : raise MalformedNanopubError ( \"The pubinfo graph is empty\" ) # Check exactly 4 graphs graph_count = 0 for c in self . _rdf . contexts (): if len ( list ( self . _rdf . quads (( None , None , None , c )))) > 0 : graph_count += 1 if graph_count != 4 : raise MalformedNanopubError ( f \" \\033 [1mToo many graphs found \\033 [0m in the provided RDF: { graph_count } . A Nanopub should have only 4 graphs (Head, assertion, provenance, pubinfo)\" ) found_prov = False for s , p , o in self . _provenance : if str ( s ) == str ( np_meta . assertion ): found_prov = True break if not found_prov : raise MalformedNanopubError ( f \"The provenance graph should contain at least one triple with the assertion graph URI as subject: \\033 [1m { np_meta . assertion } \\033 [0m\" ) found_pubinfo = False for s , p , o in self . _pubinfo : if str ( s ) == str ( np_uri ) or str ( s ) == str ( np_meta . namespace ): found_pubinfo = True break if not found_pubinfo : raise MalformedNanopubError ( f \"The pubinfo graph should contain at least one triple that has the nanopub URI as subject: \\033 [1m { np_uri } \\033 [0m\" ) # TODO: add more checks for trusty and signature # if self._metadata.signature: # if self.has_valid_signature is False: # raise MalformedNanopubError(\"The nanopub is not valid\") return True @property def rdf ( self ) -> ConjunctiveGraph : return self . _rdf @property def head ( self ): return self . _head @property def assertion ( self ): return self . _assertion @property def provenance ( self ): return self . _provenance @property def pubinfo ( self ): return self . _pubinfo @property def metadata ( self ): return self . _metadata @property def conf ( self ): return self . _conf @conf . setter def conf ( self , value ): self . _conf = value @property def source_uri ( self ): # return self._source_uri if self . _source_uri : return self . _source_uri else : return self . get_source_uri_from_graph @source_uri . setter def source_uri ( self , value ): self . _source_uri = value @property def published ( self ): return self . _published @published . setter def published ( self , value ): self . _published = value @property def concept_uri ( self ): return self . _concept_uri @concept_uri . setter def concept_uri ( self , value ): self . _concept_uri = value @property def profile ( self ): return self . _profile @profile . setter def profile ( self , value ): self . _profile = value @property def namespace ( self ): return self . _metadata . namespace @property def introduces_concept ( self ): concepts_introduced = list () for s , p , o in self . _pubinfo . triples (( None , NPX . introduces , None )): concepts_introduced . append ( o ) if len ( concepts_introduced ) == 0 : return None elif len ( concepts_introduced ) == 1 : return concepts_introduced [ 0 ] else : raise MalformedNanopubError ( \"Nanopub introduces multiple concepts\" ) @property def get_source_uri_from_graph ( self ) -> Optional [ str ]: \"\"\"Get the source URI of the nanopublication from the header. This is usually something like: http://purl.org/np/RAnksi2yDP7jpe7F6BwWCpMOmzBEcUImkAKUeKEY_2Yus \"\"\" for s in self . _rdf . subjects ( rdflib . RDF . type , NP . Nanopublication ): extract_trusty = re . search ( r '^[a-z0-9+.-]+:\\/\\/[a-zA-Z0-9\\/._-]+\\/(RA.*)$' , str ( s ), re . IGNORECASE ) if extract_trusty : return str ( s ) return None @property def signed_with_public_key ( self ) -> Optional [ str ]: np_sig = extract_np_metadata ( self . _rdf ) if np_sig . public_key : return np_sig . public_key return None @property def is_test_publication ( self ) -> bool : return self . _conf . use_test_server def __str__ ( self ) -> str : s = \"\" if self . _source_uri : s += f \"Nanopub URI: \\033 [1m { self . _source_uri } \\033 [0m \\n \" s += self . _rdf . serialize ( format = 'trig' ) return s def _handle_generated_at_time ( self , add_pubinfo_generated_time : bool , add_prov_generated_time : bool ) -> None : \"\"\"Handler for `Nanopub` constructor.\"\"\" creationtime = rdflib . Literal ( datetime . now (), datatype = XSD . dateTime ) if add_pubinfo_generated_time : self . _pubinfo . add ( ( self . _metadata . namespace [ \"\" ], PROV . generatedAtTime , creationtime ) ) if add_prov_generated_time : self . _provenance . add ( ( self . _assertion . identifier , PROV . generatedAtTime , creationtime , ) ) def _handle_assertion_attributed_to ( self , assertion_attributed_to : Optional [ str ]) -> None : \"\"\"Handler for `Nanopub` constructor.\"\"\" if assertion_attributed_to : assertion_attributed_to = URIRef ( assertion_attributed_to ) self . _provenance . add ( ( self . _assertion . identifier , PROV . wasAttributedTo , assertion_attributed_to , ) ) def _handle_publication_attributed_to ( self , attribute_publication_to_profile : bool , publication_attributed_to : Optional [ str ], ) -> None : \"\"\"Handler for `Nanopub` constructor.\"\"\" if attribute_publication_to_profile : if not self . _profile : raise MalformedNanopubError ( \"No nanopub profile provided, but attribute_publication_to_profile is enabled\" ) if publication_attributed_to is None : publication_attributed_to = rdflib . URIRef ( self . _profile . orcid_id ) else : publication_attributed_to = rdflib . URIRef ( publication_attributed_to ) self . _pubinfo . add ( ( self . _metadata . namespace [ \"\" ], PROV . wasAttributedTo , publication_attributed_to , ) ) def _handle_derived_from ( self , derived_from : Optional [ str ]): \"\"\"Handler for `Nanopub` constructor.\"\"\" if derived_from : if isinstance ( derived_from , list ): list_of_uris = derived_from else : list_of_uris = [ derived_from ] for derived_from_uri in list_of_uris : derived_from_uri = rdflib . URIRef ( derived_from_uri ) self . _provenance . add (( self . _assertion . identifier , PROV . wasDerivedFrom , derived_from_uri , )) def _handle_introduces_concept ( self , introduces_concept : Union [ BNode , URIRef ]): \"\"\"Handler for `Nanopub` constructor.\"\"\" if introduces_concept : introduces_concept = self . _metadata . namespace [ str ( introduces_concept )] self . _pubinfo . add ( ( self . _metadata . namespace [ \"\" ], NPX . introduces , introduces_concept ) ) def _validate_nanopub_arguments ( self , derived_from : Optional [ str ], assertion_attributed_to : Optional [ str ], attribute_assertion_to_profile : bool , introduces_concept : Optional [ BNode ], ) -> None : \"\"\" Validate arguments method. \"\"\" if assertion_attributed_to and attribute_assertion_to_profile : raise MalformedNanopubError ( \"If you pass a URI for the assertion_attributed_to argument, you cannot pass \" \"attribute_assertion_to_profile=True, because the assertion will already be \" \"attributed to the value passed in assertion_attributed_to argument. Set \" \"attribute_assertion_to_profile=False or do not pass the assertion_attributed_to \" \"argument.\" ) if introduces_concept and not isinstance ( introduces_concept , BNode ): raise MalformedNanopubError ( \"If you want a nanopublication to introduce a concept, you need to \" 'pass it as an rdflib.term.BNode(\"concept_name\"). This will make ' \"sure it is referred to from the nanopublication uri namespace upon \" \"publishing.\" ) if self . _provenance : if ( derived_from and ( None , PROV . wasDerivedFrom , None ) in self . _provenance ): raise MalformedNanopubError ( \"The provenance_rdf that you passed already contains the \" \"prov:wasDerivedFrom predicate, so you cannot also use the \" \"derived_from argument\" ) if ( assertion_attributed_to and ( None , PROV . wasAttributedTo , None ) in self . _provenance ): raise MalformedNanopubError ( \"The provenance_rdf that you passed already contains the \" \"prov:wasAttributedTo predicate, so you cannot also use the \" \"assertion_attributed_to argument\" ) if ( attribute_assertion_to_profile and ( None , PROV . wasAttributedTo , None ) in self . _provenance ): raise MalformedNanopubError ( \"The provenance_rdf that you passed already contains the \" \"prov:wasAttributedTo predicate, so you cannot also use the \" \"attribute_assertion_to_profile argument\" ) if self . _pubinfo : if ( introduces_concept and ( None , NPX . introduces , None ) in self . _pubinfo ): raise MalformedNanopubError ( \"The pubinfo_rdf that you passed already contains the \" \"npx:introduces predicate, so you cannot also use the \" \"introduces_concept argument\" )","title":"Nanopub"},{"location":"reference/nanopub/#nanopub.nanopub.Nanopub.get_source_uri_from_graph","text":"Get the source URI of the nanopublication from the header. This is usually something like: http://purl.org/np/RAnksi2yDP7jpe7F6BwWCpMOmzBEcUImkAKUeKEY_2Yus","title":"get_source_uri_from_graph"},{"location":"reference/nanopub/#nanopub.nanopub.Nanopub.is_valid","text":"Check if a nanopublication is valid","title":"is_valid"},{"location":"reference/nanopub/#nanopub.nanopub.Nanopub.publish","text":"Publish a Nanopub object Source code in nanopub/nanopub.py 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 def publish ( self ) -> None : \"\"\"Publish a Nanopub object\"\"\" if not self . source_uri : self . sign () publish_graph ( self . rdf , use_server = self . _conf . use_server ) log . info ( f 'Published { self . source_uri } to { self . _conf . use_server } ' ) self . published = True if self . introduces_concept : concept_uri = str ( self . introduces_concept ) # Replace the DUMMY_NANOPUB_URI with the actually published nanopub uri. This is # necessary if a blank node was passed as introduces_concept. In that case the # Nanopub.from_assertion method replaces the blank node with the base nanopub's URI # and appends a fragment, given by the 'name' of the blank node. For example, if a # blank node with name 'step' was passed as introduces_concept, the concept will be # published with a URI that looks like [published nanopub URI]#step. concept_uri = concept_uri . replace ( DUMMY_NANOPUB_URI , self . source_uri ) self . concept_uri = concept_uri log . info ( f \"Published concept to { concept_uri } \" )","title":"publish()"},{"location":"reference/nanopub/#nanopub.nanopub.Nanopub.sign","text":"Sign a Nanopub object Source code in nanopub/nanopub.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 def sign ( self ) -> None : \"\"\"Sign a Nanopub object\"\"\" if len ( self . rdf ) > MAX_TRIPLES_PER_NANOPUB : raise MalformedNanopubError ( f \"Nanopublication contains { len ( self . rdf ) } triples, which is more than the { MAX_TRIPLES_PER_NANOPUB } authorized\" ) if not self . _conf . profile : raise ProfileError ( \"Profile not available, cannot sign the nanopub\" ) if self . _metadata . signature : raise MalformedNanopubError ( f \"The nanopub have already been signed: { self . source_uri } \" ) if self . is_valid : signed_g = add_signature ( self . rdf , self . _conf . profile , self . _metadata . namespace , URIRef ( str ( self . _pubinfo . identifier ))) self . update_from_signed ( signed_g ) log . info ( f \"Signed { self . source_uri } \" ) else : raise MalformedNanopubError ( \"The nanopub is not valid, cannot sign it\" )","title":"sign()"},{"location":"reference/nanopub/#nanopub.nanopub.Nanopub.store","text":"Store the Nanopub object at the given path Source code in nanopub/nanopub.py 237 238 239 def store ( self , filepath : Path , format : str = 'trig' ) -> None : \"\"\"Store the Nanopub object at the given path\"\"\" self . _rdf . serialize ( filepath , format = format )","title":"store()"},{"location":"reference/nanopub/#nanopub.nanopub.Nanopub.update","text":"Re-publish an updated Nanopub object Source code in nanopub/nanopub.py 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 def update ( self , publish = True ) -> None : \"\"\"Re-publish an updated Nanopub object\"\"\" self . _pubinfo . add (( URIRef ( self . source_uri ), NPX . supersedes , URIRef ( self . source_uri ), )) self . _pubinfo . remove (( self . _metadata . sig_uri , None , None , )) self . _metadata = extract_np_metadata ( self . _rdf ) print ( self . _metadata ) if publish : self . publish () else : self . sign ()","title":"update()"},{"location":"reference/nanopub/#nanopub.nanopub.Nanopub.update_from_signed","text":"Update the pub RDF to the signed one Source code in nanopub/nanopub.py 163 164 165 166 167 168 169 170 171 172 173 def update_from_signed ( self , signed_g : ConjunctiveGraph ) -> None : \"\"\"Update the pub RDF to the signed one\"\"\" self . _metadata = extract_np_metadata ( signed_g ) if self . _metadata . trusty : self . _source_uri = str ( self . _metadata . np_uri ) # self._source_uri = self.get_source_uri_from_graph self . _rdf = signed_g self . _head = Graph ( self . _rdf . store , self . _metadata . head ) self . _assertion = Graph ( self . _rdf . store , self . _metadata . assertion ) self . _provenance = Graph ( self . _rdf . store , self . _metadata . provenance ) self . _pubinfo = Graph ( self . _rdf . store , self . _metadata . pubinfo )","title":"update_from_signed()"},{"location":"reference/profile/","text":"Profile This module holds objects and functions to load a nanopub user profile. Profile Represents a user profile. Attributes: Name Type Description orcid_id str The user\u2019s ORCID name str The user\u2019s name private_key Optional [ Union [ Path , str ]] Path to the user\u2019s private key, or the key as string public_key Optional [ Union [ Path , str ]] Path to the user\u2019s public key, or the key as string introduction_nanopub_uri Optional [ str ] URI of the user\u2019s profile nanopub Source code in nanopub/profile.pyclass Profile : \"\"\"Represents a user profile. Attributes: orcid_id (str): The user's ORCID name (str): The user's name private_key (Optional[Union[Path, str]]): Path to the user's private key, or the key as string public_key (Optional[Union[Path, str]]): Path to the user's public key, or the key as string introduction_nanopub_uri (Optional[str]): URI of the user's profile nanopub \"\"\" def __init__ ( self , orcid_id : str , name : str , private_key : Optional [ Union [ Path , str ]] = None , public_key : Optional [ Union [ Path , str ]] = None , introduction_nanopub_uri : Optional [ str ] = None ) -> None : \"\"\"Create a Profile.\"\"\" self . _orcid_id = orcid_id self . _name = name self . _introduction_nanopub_uri = introduction_nanopub_uri if not private_key : self . generate_keys () elif isinstance ( private_key , Path ): try : with open ( private_key ) as f : self . _private_key = f . read () . strip () except FileNotFoundError : raise ProfileError ( f 'Private key file { private_key } for nanopub not found. \\n ' f 'Maybe your nanopub profile was not set up yet or not set up ' f 'correctly. \\n { PROFILE_INSTRUCTIONS_MESSAGE } ' ) else : self . _private_key = private_key if not public_key : log . info ( 'Public key not provided when loading the Nanopub profile, generating it from the provided private key' ) key = RSA . importKey ( decodebytes ( self . _private_key . encode ())) self . _public_key = key . publickey () . export_key () . decode ( 'utf-8' ) else : if isinstance ( public_key , Path ): try : with open ( public_key ) as f : self . _public_key = f . read () . strip () except FileNotFoundError : raise ProfileError ( f 'Private key file { public_key } for nanopub not found. \\n ' f 'Maybe your nanopub profile was not set up yet or not set up ' f 'correctly. \\n { PROFILE_INSTRUCTIONS_MESSAGE } ' ) else : self . _public_key = public_key def generate_keys ( self ) -> str : \"\"\"Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs\"\"\" key = RSA . generate ( 2048 ) private_key_str = key . export_key ( 'PEM' , pkcs = 8 ) . decode ( 'utf-8' ) public_key_str = key . publickey () . export_key () . decode ( 'utf-8' ) # Format private and public keys to remove header/footer and all newlines, as this is required by nanopub-java private_key_str = private_key_str . replace ( \"-----BEGIN PRIVATE KEY-----\" , \"\" ) . replace ( \"-----END PRIVATE KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () public_key_str = public_key_str . replace ( \"-----BEGIN PUBLIC KEY-----\" , \"\" ) . replace ( \"-----END PUBLIC KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () self . _private_key = private_key_str self . _public_key = public_key_str log . info ( f \"Public/private RSA key pair has been generated for { self . orcid_id } ( { self . name } )\" ) return public_key_str def store ( self , folder : Path = USER_CONFIG_DIR ) -> Path : \"\"\"Stores the nanopub user profile. By default the profile is stored in `HOME_DIR/.nanopub/profile.yaml`. Args: folder: The path to the folder to store the user's profile files. Returns: The path where the profile was stored. \"\"\" folder . mkdir ( parents = True , exist_ok = True ) private_key_path = folder / \"id_rsa\" public_key_path = folder / \"id_rsa.pub\" profile_path = folder / \"profile.yml\" # Store keys if not private_key_path . exists (): with open ( private_key_path , \"w\" ) as f : f . write ( self . private_key + ' \\n ' ) if not public_key_path . exists (): with open ( public_key_path , \"w\" ) as f : f . write ( self . public_key ) intro_uri = '' if self . introduction_nanopub_uri : intro_uri = f \" { self . introduction_nanopub_uri } \" # Store profile.yml profile_yaml = f \"\"\"orcid_id: { self . orcid_id } name: { self . name } public_key: { public_key_path } private_key: { private_key_path } introduction_nanopub_uri: { intro_uri } \"\"\" with open ( profile_path , \"w\" ) as f : f . write ( profile_yaml ) return profile_path @property def orcid_id ( self ): return self . _orcid_id @orcid_id . setter def orcid_id ( self , value ): self . _orcid_id = value @property def name ( self ): return self . _name @name . setter def name ( self , value ): self . _name = value @property def private_key ( self ): return self . _private_key @private_key . setter def private_key ( self , value ): self . _private_key = value @property def public_key ( self ): return self . _public_key @public_key . setter def public_key ( self , value ): self . _public_key = value @property def introduction_nanopub_uri ( self ): return self . _introduction_nanopub_uri @introduction_nanopub_uri . setter def introduction_nanopub_uri ( self , value ): self . _introduction_nanopub_uri = value def __repr__ ( self ): return f \"\"\" \\033 [1mORCID \\033 [0m: { self . _orcid_id } \\033 [1mName \\033 [0m: { self . _name } \\033 [1mPrivate key \\033 [0m: { self . _private_key } \\033 [1mPublic key \\033 [0m: { self . _public_key } \\033 [1mIntro Nanopub URI \\033 [0m: { self . _introduction_nanopub_uri } \"\"\" __init__ ( orcid_id , name , private_key = None , public_key = None , introduction_nanopub_uri = None ) Create a Profile. Source code in nanopub/profile.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def __init__ ( self , orcid_id : str , name : str , private_key : Optional [ Union [ Path , str ]] = None , public_key : Optional [ Union [ Path , str ]] = None , introduction_nanopub_uri : Optional [ str ] = None ) -> None : \"\"\"Create a Profile.\"\"\" self . _orcid_id = orcid_id self . _name = name self . _introduction_nanopub_uri = introduction_nanopub_uri if not private_key : self . generate_keys () elif isinstance ( private_key , Path ): try : with open ( private_key ) as f : self . _private_key = f . read () . strip () except FileNotFoundError : raise ProfileError ( f 'Private key file { private_key } for nanopub not found. \\n ' f 'Maybe your nanopub profile was not set up yet or not set up ' f 'correctly. \\n { PROFILE_INSTRUCTIONS_MESSAGE } ' ) else : self . _private_key = private_key if not public_key : log . info ( 'Public key not provided when loading the Nanopub profile, generating it from the provided private key' ) key = RSA . importKey ( decodebytes ( self . _private_key . encode ())) self . _public_key = key . publickey () . export_key () . decode ( 'utf-8' ) else : if isinstance ( public_key , Path ): try : with open ( public_key ) as f : self . _public_key = f . read () . strip () except FileNotFoundError : raise ProfileError ( f 'Private key file { public_key } for nanopub not found. \\n ' f 'Maybe your nanopub profile was not set up yet or not set up ' f 'correctly. \\n { PROFILE_INSTRUCTIONS_MESSAGE } ' ) else : self . _public_key = public_key generate_keys () Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs Source code in nanopub/profile.py 84 85 86 87 88 89 90 91 92 93 94 95 96 def generate_keys ( self ) -> str : \"\"\"Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs\"\"\" key = RSA . generate ( 2048 ) private_key_str = key . export_key ( 'PEM' , pkcs = 8 ) . decode ( 'utf-8' ) public_key_str = key . publickey () . export_key () . decode ( 'utf-8' ) # Format private and public keys to remove header/footer and all newlines, as this is required by nanopub-java private_key_str = private_key_str . replace ( \"-----BEGIN PRIVATE KEY-----\" , \"\" ) . replace ( \"-----END PRIVATE KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () public_key_str = public_key_str . replace ( \"-----BEGIN PUBLIC KEY-----\" , \"\" ) . replace ( \"-----END PUBLIC KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () self . _private_key = private_key_str self . _public_key = public_key_str log . info ( f \"Public/private RSA key pair has been generated for { self . orcid_id } ( { self . name } )\" ) return public_key_str store ( folder = USER_CONFIG_DIR ) Stores the nanopub user profile. By default the profile is stored in HOME_DIR/.nanopub/profile.yaml . Parameters: Name Type Description Default folder Path The path to the folder to store the user\u2019s profile files. USER_CONFIG_DIR Returns: Type Description Path The path where the profile was stored. Source code in nanopub/profile.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 def store ( self , folder : Path = USER_CONFIG_DIR ) -> Path : \"\"\"Stores the nanopub user profile. By default the profile is stored in `HOME_DIR/.nanopub/profile.yaml`. Args: folder: The path to the folder to store the user's profile files. Returns: The path where the profile was stored. \"\"\" folder . mkdir ( parents = True , exist_ok = True ) private_key_path = folder / \"id_rsa\" public_key_path = folder / \"id_rsa.pub\" profile_path = folder / \"profile.yml\" # Store keys if not private_key_path . exists (): with open ( private_key_path , \"w\" ) as f : f . write ( self . private_key + ' \\n ' ) if not public_key_path . exists (): with open ( public_key_path , \"w\" ) as f : f . write ( self . public_key ) intro_uri = '' if self . introduction_nanopub_uri : intro_uri = f \" { self . introduction_nanopub_uri } \" # Store profile.yml profile_yaml = f \"\"\"orcid_id: { self . orcid_id } name: { self . name } public_key: { public_key_path } private_key: { private_key_path } introduction_nanopub_uri: { intro_uri } \"\"\" with open ( profile_path , \"w\" ) as f : f . write ( profile_yaml ) return profile_path ProfileError Bases: RuntimeError Error to be raised if profile is not setup correctly. Source code in nanopub/profile.py 20 21 22 23 class ProfileError ( RuntimeError ): \"\"\" Error to be raised if profile is not setup correctly. \"\"\" ProfileLoader Bases: Profile A class to load a user profile from a local YAML file, only used for YAtiML. Source code in nanopub/profile.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 class ProfileLoader ( Profile ): \"\"\"A class to load a user profile from a local YAML file, only used for YAtiML.\"\"\" def __init__ ( self , orcid_id : str , name : str , private_key : Path , public_key : Optional [ Path ], introduction_nanopub_uri : Optional [ str ] = None ) -> None : \"\"\"Create a ProfileLoader.\"\"\" super () . __init__ ( orcid_id = orcid_id , name = name , private_key = private_key , public_key = public_key , introduction_nanopub_uri = introduction_nanopub_uri , ) __init__ ( orcid_id , name , private_key , public_key , introduction_nanopub_uri = None ) Create a ProfileLoader. Source code in nanopub/profile.py 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def __init__ ( self , orcid_id : str , name : str , private_key : Path , public_key : Optional [ Path ], introduction_nanopub_uri : Optional [ str ] = None ) -> None : \"\"\"Create a ProfileLoader.\"\"\" super () . __init__ ( orcid_id = orcid_id , name = name , private_key = private_key , public_key = public_key , introduction_nanopub_uri = introduction_nanopub_uri , ) generate_keyfiles ( path = USER_CONFIG_DIR ) Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs Source code in nanopub/profile.py 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 def generate_keyfiles ( path : Path = USER_CONFIG_DIR ) -> str : \"\"\"Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs\"\"\" if not path . exists (): path . mkdir () key = RSA . generate ( 2048 ) private_key_str = key . export_key ( 'PEM' , pkcs = 8 ) . decode ( 'utf-8' ) public_key_str = key . publickey () . export_key () . decode ( 'utf-8' ) # Format private and public keys to remove header/footer and all newlines, as this is required by nanopub-java private_key_str = private_key_str . replace ( \"-----BEGIN PRIVATE KEY-----\" , \"\" ) . replace ( \"-----END PRIVATE KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () public_key_str = public_key_str . replace ( \"-----BEGIN PUBLIC KEY-----\" , \"\" ) . replace ( \"-----END PUBLIC KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () private_path = path / \"id_rsa\" public_path = path / \"id_rsa.pub\" # Store key pair private_key_file = open ( private_path , \"w\" ) private_key_file . write ( private_key_str ) private_key_file . close () public_key_file = open ( public_path , \"w\" ) public_key_file . write ( public_key_str ) public_key_file . close () log . info ( f \"Public/private RSA key pair has been generated in { private_path } and { public_path } \" ) return public_key_str load_profile ( profile_path = DEFAULT_PROFILE_PATH ) Retrieve nanopub user profile. By default the profile is stored in HOME_DIR/.nanopub/profile.yaml . Returns: Type Description Profile A Profile containing the data from the configuration file. Raises: Type Description yatiml . RecognitionError If there is an error in the file. Source code in nanopub/profile.py 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def load_profile ( profile_path : Union [ Path , str ] = DEFAULT_PROFILE_PATH ) -> Profile : \"\"\"Retrieve nanopub user profile. By default the profile is stored in `HOME_DIR/.nanopub/profile.yaml`. Returns: A Profile containing the data from the configuration file. Raises: yatiml.RecognitionError: If there is an error in the file. \"\"\" try : return _load_profile ( Path ( profile_path )) except ( yatiml . RecognitionError , FileNotFoundError ) as e : msg = ( f ' { e } \\n Your nanopub profile has not been set up yet, or is not set up correctly. \\n ' f ' { PROFILE_INSTRUCTIONS_MESSAGE } ' ) raise ProfileError ( msg )","title":"Profile"},{"location":"reference/profile/#profile","text":"This module holds objects and functions to load a nanopub user profile.","title":"Profile"},{"location":"reference/profile/#nanopub.profile.Profile","text":"Represents a user profile. Attributes: Name Type Description orcid_id str The user\u2019s ORCID name str The user\u2019s name private_key Optional [ Union [ Path , str ]] Path to the user\u2019s private key, or the key as string public_key Optional [ Union [ Path , str ]] Path to the user\u2019s public key, or the key as string introduction_nanopub_uri Optional [ str ] URI of the user\u2019s profile nanopub Source code in nanopub/profile.pyclass Profile : \"\"\"Represents a user profile. Attributes: orcid_id (str): The user's ORCID name (str): The user's name private_key (Optional[Union[Path, str]]): Path to the user's private key, or the key as string public_key (Optional[Union[Path, str]]): Path to the user's public key, or the key as string introduction_nanopub_uri (Optional[str]): URI of the user's profile nanopub \"\"\" def __init__ ( self , orcid_id : str , name : str , private_key : Optional [ Union [ Path , str ]] = None , public_key : Optional [ Union [ Path , str ]] = None , introduction_nanopub_uri : Optional [ str ] = None ) -> None : \"\"\"Create a Profile.\"\"\" self . _orcid_id = orcid_id self . _name = name self . _introduction_nanopub_uri = introduction_nanopub_uri if not private_key : self . generate_keys () elif isinstance ( private_key , Path ): try : with open ( private_key ) as f : self . _private_key = f . read () . strip () except FileNotFoundError : raise ProfileError ( f 'Private key file { private_key } for nanopub not found. \\n ' f 'Maybe your nanopub profile was not set up yet or not set up ' f 'correctly. \\n { PROFILE_INSTRUCTIONS_MESSAGE } ' ) else : self . _private_key = private_key if not public_key : log . info ( 'Public key not provided when loading the Nanopub profile, generating it from the provided private key' ) key = RSA . importKey ( decodebytes ( self . _private_key . encode ())) self . _public_key = key . publickey () . export_key () . decode ( 'utf-8' ) else : if isinstance ( public_key , Path ): try : with open ( public_key ) as f : self . _public_key = f . read () . strip () except FileNotFoundError : raise ProfileError ( f 'Private key file { public_key } for nanopub not found. \\n ' f 'Maybe your nanopub profile was not set up yet or not set up ' f 'correctly. \\n { PROFILE_INSTRUCTIONS_MESSAGE } ' ) else : self . _public_key = public_key def generate_keys ( self ) -> str : \"\"\"Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs\"\"\" key = RSA . generate ( 2048 ) private_key_str = key . export_key ( 'PEM' , pkcs = 8 ) . decode ( 'utf-8' ) public_key_str = key . publickey () . export_key () . decode ( 'utf-8' ) # Format private and public keys to remove header/footer and all newlines, as this is required by nanopub-java private_key_str = private_key_str . replace ( \"-----BEGIN PRIVATE KEY-----\" , \"\" ) . replace ( \"-----END PRIVATE KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () public_key_str = public_key_str . replace ( \"-----BEGIN PUBLIC KEY-----\" , \"\" ) . replace ( \"-----END PUBLIC KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () self . _private_key = private_key_str self . _public_key = public_key_str log . info ( f \"Public/private RSA key pair has been generated for { self . orcid_id } ( { self . name } )\" ) return public_key_str def store ( self , folder : Path = USER_CONFIG_DIR ) -> Path : \"\"\"Stores the nanopub user profile. By default the profile is stored in `HOME_DIR/.nanopub/profile.yaml`. Args: folder: The path to the folder to store the user's profile files. Returns: The path where the profile was stored. \"\"\" folder . mkdir ( parents = True , exist_ok = True ) private_key_path = folder / \"id_rsa\" public_key_path = folder / \"id_rsa.pub\" profile_path = folder / \"profile.yml\" # Store keys if not private_key_path . exists (): with open ( private_key_path , \"w\" ) as f : f . write ( self . private_key + ' \\n ' ) if not public_key_path . exists (): with open ( public_key_path , \"w\" ) as f : f . write ( self . public_key ) intro_uri = '' if self . introduction_nanopub_uri : intro_uri = f \" { self . introduction_nanopub_uri } \" # Store profile.yml profile_yaml = f \"\"\"orcid_id: { self . orcid_id } name: { self . name } public_key: { public_key_path } private_key: { private_key_path } introduction_nanopub_uri: { intro_uri } \"\"\" with open ( profile_path , \"w\" ) as f : f . write ( profile_yaml ) return profile_path @property def orcid_id ( self ): return self . _orcid_id @orcid_id . setter def orcid_id ( self , value ): self . _orcid_id = value @property def name ( self ): return self . _name @name . setter def name ( self , value ): self . _name = value @property def private_key ( self ): return self . _private_key @private_key . setter def private_key ( self , value ): self . _private_key = value @property def public_key ( self ): return self . _public_key @public_key . setter def public_key ( self , value ): self . _public_key = value @property def introduction_nanopub_uri ( self ): return self . _introduction_nanopub_uri @introduction_nanopub_uri . setter def introduction_nanopub_uri ( self , value ): self . _introduction_nanopub_uri = value def __repr__ ( self ): return f \"\"\" \\033 [1mORCID \\033 [0m: { self . _orcid_id } \\033 [1mName \\033 [0m: { self . _name } \\033 [1mPrivate key \\033 [0m: { self . _private_key } \\033 [1mPublic key \\033 [0m: { self . _public_key } \\033 [1mIntro Nanopub URI \\033 [0m: { self . _introduction_nanopub_uri } \"\"\"","title":"Profile"},{"location":"reference/profile/#nanopub.profile.Profile.__init__","text":"Create a Profile. Source code in nanopub/profile.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 def __init__ ( self , orcid_id : str , name : str , private_key : Optional [ Union [ Path , str ]] = None , public_key : Optional [ Union [ Path , str ]] = None , introduction_nanopub_uri : Optional [ str ] = None ) -> None : \"\"\"Create a Profile.\"\"\" self . _orcid_id = orcid_id self . _name = name self . _introduction_nanopub_uri = introduction_nanopub_uri if not private_key : self . generate_keys () elif isinstance ( private_key , Path ): try : with open ( private_key ) as f : self . _private_key = f . read () . strip () except FileNotFoundError : raise ProfileError ( f 'Private key file { private_key } for nanopub not found. \\n ' f 'Maybe your nanopub profile was not set up yet or not set up ' f 'correctly. \\n { PROFILE_INSTRUCTIONS_MESSAGE } ' ) else : self . _private_key = private_key if not public_key : log . info ( 'Public key not provided when loading the Nanopub profile, generating it from the provided private key' ) key = RSA . importKey ( decodebytes ( self . _private_key . encode ())) self . _public_key = key . publickey () . export_key () . decode ( 'utf-8' ) else : if isinstance ( public_key , Path ): try : with open ( public_key ) as f : self . _public_key = f . read () . strip () except FileNotFoundError : raise ProfileError ( f 'Private key file { public_key } for nanopub not found. \\n ' f 'Maybe your nanopub profile was not set up yet or not set up ' f 'correctly. \\n { PROFILE_INSTRUCTIONS_MESSAGE } ' ) else : self . _public_key = public_key","title":"__init__()"},{"location":"reference/profile/#nanopub.profile.Profile.generate_keys","text":"Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs Source code in nanopub/profile.py 84 85 86 87 88 89 90 91 92 93 94 95 96 def generate_keys ( self ) -> str : \"\"\"Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs\"\"\" key = RSA . generate ( 2048 ) private_key_str = key . export_key ( 'PEM' , pkcs = 8 ) . decode ( 'utf-8' ) public_key_str = key . publickey () . export_key () . decode ( 'utf-8' ) # Format private and public keys to remove header/footer and all newlines, as this is required by nanopub-java private_key_str = private_key_str . replace ( \"-----BEGIN PRIVATE KEY-----\" , \"\" ) . replace ( \"-----END PRIVATE KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () public_key_str = public_key_str . replace ( \"-----BEGIN PUBLIC KEY-----\" , \"\" ) . replace ( \"-----END PUBLIC KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () self . _private_key = private_key_str self . _public_key = public_key_str log . info ( f \"Public/private RSA key pair has been generated for { self . orcid_id } ( { self . name } )\" ) return public_key_str","title":"generate_keys()"},{"location":"reference/profile/#nanopub.profile.Profile.store","text":"Stores the nanopub user profile. By default the profile is stored in HOME_DIR/.nanopub/profile.yaml . Parameters: Name Type Description Default folder Path The path to the folder to store the user\u2019s profile files. USER_CONFIG_DIR Returns: Type Description Path The path where the profile was stored. Source code in nanopub/profile.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 def store ( self , folder : Path = USER_CONFIG_DIR ) -> Path : \"\"\"Stores the nanopub user profile. By default the profile is stored in `HOME_DIR/.nanopub/profile.yaml`. Args: folder: The path to the folder to store the user's profile files. Returns: The path where the profile was stored. \"\"\" folder . mkdir ( parents = True , exist_ok = True ) private_key_path = folder / \"id_rsa\" public_key_path = folder / \"id_rsa.pub\" profile_path = folder / \"profile.yml\" # Store keys if not private_key_path . exists (): with open ( private_key_path , \"w\" ) as f : f . write ( self . private_key + ' \\n ' ) if not public_key_path . exists (): with open ( public_key_path , \"w\" ) as f : f . write ( self . public_key ) intro_uri = '' if self . introduction_nanopub_uri : intro_uri = f \" { self . introduction_nanopub_uri } \" # Store profile.yml profile_yaml = f \"\"\"orcid_id: { self . orcid_id } name: { self . name } public_key: { public_key_path } private_key: { private_key_path } introduction_nanopub_uri: { intro_uri } \"\"\" with open ( profile_path , \"w\" ) as f : f . write ( profile_yaml ) return profile_path","title":"store()"},{"location":"reference/profile/#nanopub.profile.ProfileError","text":"Bases: RuntimeError Error to be raised if profile is not setup correctly. Source code in nanopub/profile.py 20 21 22 23 class ProfileError ( RuntimeError ): \"\"\" Error to be raised if profile is not setup correctly. \"\"\"","title":"ProfileError"},{"location":"reference/profile/#nanopub.profile.ProfileLoader","text":"Bases: Profile A class to load a user profile from a local YAML file, only used for YAtiML. Source code in nanopub/profile.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 class ProfileLoader ( Profile ): \"\"\"A class to load a user profile from a local YAML file, only used for YAtiML.\"\"\" def __init__ ( self , orcid_id : str , name : str , private_key : Path , public_key : Optional [ Path ], introduction_nanopub_uri : Optional [ str ] = None ) -> None : \"\"\"Create a ProfileLoader.\"\"\" super () . __init__ ( orcid_id = orcid_id , name = name , private_key = private_key , public_key = public_key , introduction_nanopub_uri = introduction_nanopub_uri , )","title":"ProfileLoader"},{"location":"reference/profile/#nanopub.profile.ProfileLoader.__init__","text":"Create a ProfileLoader. Source code in nanopub/profile.py 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def __init__ ( self , orcid_id : str , name : str , private_key : Path , public_key : Optional [ Path ], introduction_nanopub_uri : Optional [ str ] = None ) -> None : \"\"\"Create a ProfileLoader.\"\"\" super () . __init__ ( orcid_id = orcid_id , name = name , private_key = private_key , public_key = public_key , introduction_nanopub_uri = introduction_nanopub_uri , )","title":"__init__()"},{"location":"reference/profile/#nanopub.profile.generate_keyfiles","text":"Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs Source code in nanopub/profile.py 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 def generate_keyfiles ( path : Path = USER_CONFIG_DIR ) -> str : \"\"\"Generate private/public RSA key pair at the path specified in the profile.yml, to be used to sign nanopubs\"\"\" if not path . exists (): path . mkdir () key = RSA . generate ( 2048 ) private_key_str = key . export_key ( 'PEM' , pkcs = 8 ) . decode ( 'utf-8' ) public_key_str = key . publickey () . export_key () . decode ( 'utf-8' ) # Format private and public keys to remove header/footer and all newlines, as this is required by nanopub-java private_key_str = private_key_str . replace ( \"-----BEGIN PRIVATE KEY-----\" , \"\" ) . replace ( \"-----END PRIVATE KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () public_key_str = public_key_str . replace ( \"-----BEGIN PUBLIC KEY-----\" , \"\" ) . replace ( \"-----END PUBLIC KEY-----\" , \"\" ) . replace ( \" \\n \" , \"\" ) . strip () private_path = path / \"id_rsa\" public_path = path / \"id_rsa.pub\" # Store key pair private_key_file = open ( private_path , \"w\" ) private_key_file . write ( private_key_str ) private_key_file . close () public_key_file = open ( public_path , \"w\" ) public_key_file . write ( public_key_str ) public_key_file . close () log . info ( f \"Public/private RSA key pair has been generated in { private_path } and { public_path } \" ) return public_key_str","title":"generate_keyfiles()"},{"location":"reference/profile/#nanopub.profile.load_profile","text":"Retrieve nanopub user profile. By default the profile is stored in HOME_DIR/.nanopub/profile.yaml . Returns: Type Description Profile A Profile containing the data from the configuration file. Raises: Type Description yatiml . RecognitionError If there is an error in the file. Source code in nanopub/profile.py 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 def load_profile ( profile_path : Union [ Path , str ] = DEFAULT_PROFILE_PATH ) -> Profile : \"\"\"Retrieve nanopub user profile. By default the profile is stored in `HOME_DIR/.nanopub/profile.yaml`. Returns: A Profile containing the data from the configuration file. Raises: yatiml.RecognitionError: If there is an error in the file. \"\"\" try : return _load_profile ( Path ( profile_path )) except ( yatiml . RecognitionError , FileNotFoundError ) as e : msg = ( f ' { e } \\n Your nanopub profile has not been set up yet, or is not set up correctly. \\n ' f ' { PROFILE_INSTRUCTIONS_MESSAGE } ' ) raise ProfileError ( msg )","title":"load_profile()"},{"location":"reference/templates/","text":"Nanopublications templates NanopubClaim Bases: Nanopub Quickly claim a statement. Constructs statement triples around the provided text following the Hypotheses and Claims Ontology (http://purl.org/petapico/o/hycl). Parameters: Name Type Description Default conf NanopubConf config for the nanopub required claim str the text of the statement, example: \u2018All cats are grey\u2019 required Source code in nanopub/templates/nanopub_claim.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class NanopubClaim ( Nanopub ): \"\"\"Quickly claim a statement. Constructs statement triples around the provided text following the Hypotheses and Claims Ontology (http://purl.org/petapico/o/hycl). Args: conf: config for the nanopub claim (str): the text of the statement, example: 'All cats are grey' \"\"\" def __init__ ( self , claim : str , conf : NanopubConf , ) -> None : conf = deepcopy ( conf ) conf . add_prov_generated_time = True conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True super () . __init__ ( conf = conf , ) if not self . profile : raise ProfileError ( \"No profile provided, cannot generate a Nanopub Claim\" ) this_statement = self . _metadata . namespace . claim # this_statement = BNode(\"mystatement\") self . assertion . add (( this_statement , RDF . type , HYCL . Statement )) self . assertion . add (( this_statement , RDFS . label , Literal ( claim ))) orcid_id_uri = URIRef ( self . profile . orcid_id ) self . provenance . add (( orcid_id_uri , HYCL . claims , this_statement )) NanopubRetract Bases: Nanopub Retract a nanopublication. Publish a retraction nanpublication that declares retraction of the nanopublication that corresponds to the \u2018uri\u2019 argument. Parameters: Name Type Description Default conf NanopubConf config for the nanopub required uri str The uri pointing to the to-be-retracted nanopublication required force bool Toggle using force to retract, this will even retract the nanopublication if it is signed with a different public key than the one in the user profile. False Source code in nanopub/templates/nanopub_retract.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class NanopubRetract ( Nanopub ): \"\"\"Retract a nanopublication. Publish a retraction nanpublication that declares retraction of the nanopublication that corresponds to the 'uri' argument. Args: conf: config for the nanopub uri (str): The uri pointing to the to-be-retracted nanopublication force (bool): Toggle using force to retract, this will even retract the nanopublication if it is signed with a different public key than the one in the user profile. \"\"\" def __init__ ( self , conf : NanopubConf , uri : str , force : bool = False , ) -> None : conf = deepcopy ( conf ) conf . add_prov_generated_time = True conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True conf . attribute_assertion_to_profile = True super () . __init__ ( conf = conf , ) if not self . profile : raise ProfileError ( \"No profile provided, cannot generate a Nanopub to retract another nanopub\" ) if not force : self . _check_public_keys_match ( uri ) orcid_id = self . profile . orcid_id self . assertion . add ( ( URIRef ( orcid_id ), NPX . retracts , URIRef ( uri )) ) def _check_public_keys_match ( self , uri ): \"\"\"Check for matching public keys of a nanopublication with the profile. Raises: AssertionError: When the nanopublication is signed with a public key that does not match the public key in the profile \"\"\" np = Nanopub ( uri , conf = NanopubConf ( use_test_server = self . _conf . use_test_server , use_server = self . _conf . use_server , ) ) if np . metadata . public_key is None : raise MalformedNanopubError ( f \"Public key not found in the nanopub { np . source_uri } \" ) if self . _conf . profile . public_key is None : raise ValueError ( f \"Public key not found for profile { self . _conf . profile . orcid_id } \" ) if np . metadata . public_key != self . _conf . profile . public_key is None : raise AssertionError ( \"The public key in your profile does not match the public key\" \"that the publication that you want to retract is signed with.\" ) NanopubIndex Bases: Nanopub Publish a list of nanopub URIs in a Nanopub Index Parameters: Name Type Description Default conf NanopubConf config for the nanopub required np_list Union [ List [ str ], List [ Nanopub ]] List of nanopub URIs required title str Title of the Nanopub Index required description str Description of the Nanopub Index required creation_time str Creation time of the Nanopub Index, in format YYYY-MM-DDThh-mm-ss required creators List [ str ] List of the ORCID of the creators of the Nanopub Index required see_also str A URL to a page with further information on the Nanopub Index None Source code in nanopub/templates/nanopub_index.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class NanopubIndex ( Nanopub ): \"\"\"Publish a list of nanopub URIs in a Nanopub Index Args: conf: config for the nanopub np_list: List of nanopub URIs title: Title of the Nanopub Index description: Description of the Nanopub Index creation_time: Creation time of the Nanopub Index, in format YYYY-MM-DDThh-mm-ss creators: List of the ORCID of the creators of the Nanopub Index see_also: A URL to a page with further information on the Nanopub Index \"\"\" def __init__ ( self , conf : NanopubConf , np_list : Union [ List [ str ], List [ Nanopub ]], title : str , description : str , creation_time : str , creators : List [ str ], see_also : str = None , top_level : bool = False , ) -> None : conf = deepcopy ( conf ) conf . add_prov_generated_time = False conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True super () . __init__ ( conf = conf , ) for np in np_list : if isinstance ( np , Nanopub ): np_uri = np . source_uri else : np_uri = np if top_level : self . assertion . add (( DUMMY_URI , NPX . appendsIndex , URIRef ( np_uri ))) else : self . assertion . add (( DUMMY_URI , NPX . includesElement , URIRef ( np_uri ))) self . pubinfo . add (( DUMMY_URI , RDF . type , NPX . NanopubIndex )) self . pubinfo . add (( DUMMY_URI , DC . title , Literal ( title ))) self . pubinfo . add (( DUMMY_URI , DC . description , Literal ( description ))) if see_also : self . pubinfo . add (( DUMMY_URI , RDFS . seeAlso , URIRef ( see_also ))) for creator in creators : self . pubinfo . add (( DUMMY_URI , PAV . createdBy , URIRef ( creator ))) # TODO: use current time if not provided # datetime.datetime.now().astimezone().replace(microsecond=0).isoformat() ? self . pubinfo . add ( ( DUMMY_URI , DCTERMS . created , Literal ( creation_time , datatype = XSD . dateTime , normalize = False ), ) ) self . provenance . add (( DUMMY_NAMESPACE . assertion , RDF . type , NPX . IndexAssertion )) create_nanopub_index ( conf , np_list , title , description , creation_time , creators , see_also = None ) Create a Nanopub index. Publish a list of nanopub URIs in a Nanopub Index Parameters: Name Type Description Default np_list Union [ List [ str ], List [ Nanopub ]] List of nanopub URIs required title str Title of the Nanopub Index required description str Description of the Nanopub Index required creation_time str Creation time of the Nanopub Index, in format YYYY-MM-DDThh-mm-ss required creators List [ str ] List of the ORCID of the creators of the Nanopub Index required see_also str A URL to a page with further information on the Nanopub Index None Source code in nanopub/templates/nanopub_index.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def create_nanopub_index ( conf : NanopubConf , np_list : Union [ List [ str ], List [ Nanopub ]], title : str , description : str , creation_time : str , creators : List [ str ], see_also : str = None , ) -> List [ Nanopub ]: \"\"\"Create a Nanopub index. Publish a list of nanopub URIs in a Nanopub Index Args: np_list: List of nanopub URIs title: Title of the Nanopub Index description: Description of the Nanopub Index creation_time: Creation time of the Nanopub Index, in format YYYY-MM-DDThh-mm-ss creators: List of the ORCID of the creators of the Nanopub Index see_also: A URL to a page with further information on the Nanopub Index \"\"\" pub_list : List [ Nanopub ] = [] for i in range ( 0 , len ( np_list ), MAX_NP_PER_INDEX ): np_chunk = np_list [ i : i + MAX_NP_PER_INDEX ] pub = NanopubIndex ( conf , np_chunk , title , description , creation_time , creators , see_also , top_level = False ) pub . sign () log . info ( f \"Signed Nanopub Index: { pub . source_uri } \" ) pub_list . append ( pub ) if len ( pub_list ) > 1 : toplevel_pub = NanopubIndex ( conf , pub_list , title , description , creation_time , creators , see_also , top_level = True ) toplevel_pub . sign () log . info ( f \"Signed top level Nanopub Index: { toplevel_pub . source_uri } \" ) pub_list . append ( toplevel_pub ) return pub_list NanopubIntroduction Bases: Nanopub Publish a Nanopub introduction to introduce a key pair for an ORCID Parameters: Name Type Description Default conf NanopubConf config for the nanopub required host Optional [ str ] the service where the keypair are hosted None Source code in nanopub/templates/nanopub_introduction.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 class NanopubIntroduction ( Nanopub ): \"\"\"Publish a Nanopub introduction to introduce a key pair for an ORCID Args: conf: config for the nanopub host: the service where the keypair are hosted \"\"\" def __init__ ( self , conf : NanopubConf , host : Optional [ str ] = None , ) -> None : conf = deepcopy ( conf ) conf . add_prov_generated_time = False conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True conf . attribute_assertion_to_profile = True super () . __init__ ( conf = conf , ) if not self . profile : raise ProfileError ( \"No profile provided, cannot generate a Nanopub Introduction\" ) key_declaration = self . _metadata . namespace . keyDeclaration orcid_node = URIRef ( self . conf . profile . orcid_id ) self . assertion . add (( key_declaration , NPX . declaredBy , orcid_node )) self . assertion . add (( key_declaration , NPX . hasAlgorithm , Literal ( \"RSA\" ))) self . assertion . add (( key_declaration , NPX . hasPublicKey , Literal ( self . conf . profile . public_key ))) self . assertion . add (( orcid_node , FOAF . name , Literal ( self . conf . profile . name ))) if host : self . assertion . add (( key_declaration , NPX . hasKeyLocation , URIRef ( host )))","title":"Templates"},{"location":"reference/templates/#nanopublications-templates","text":"","title":"Nanopublications templates"},{"location":"reference/templates/#nanopub.templates.nanopub_claim.NanopubClaim","text":"Bases: Nanopub Quickly claim a statement. Constructs statement triples around the provided text following the Hypotheses and Claims Ontology (http://purl.org/petapico/o/hycl). Parameters: Name Type Description Default conf NanopubConf config for the nanopub required claim str the text of the statement, example: \u2018All cats are grey\u2019 required Source code in nanopub/templates/nanopub_claim.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class NanopubClaim ( Nanopub ): \"\"\"Quickly claim a statement. Constructs statement triples around the provided text following the Hypotheses and Claims Ontology (http://purl.org/petapico/o/hycl). Args: conf: config for the nanopub claim (str): the text of the statement, example: 'All cats are grey' \"\"\" def __init__ ( self , claim : str , conf : NanopubConf , ) -> None : conf = deepcopy ( conf ) conf . add_prov_generated_time = True conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True super () . __init__ ( conf = conf , ) if not self . profile : raise ProfileError ( \"No profile provided, cannot generate a Nanopub Claim\" ) this_statement = self . _metadata . namespace . claim # this_statement = BNode(\"mystatement\") self . assertion . add (( this_statement , RDF . type , HYCL . Statement )) self . assertion . add (( this_statement , RDFS . label , Literal ( claim ))) orcid_id_uri = URIRef ( self . profile . orcid_id ) self . provenance . add (( orcid_id_uri , HYCL . claims , this_statement ))","title":"NanopubClaim"},{"location":"reference/templates/#nanopub.templates.nanopub_retract.NanopubRetract","text":"Bases: Nanopub Retract a nanopublication. Publish a retraction nanpublication that declares retraction of the nanopublication that corresponds to the \u2018uri\u2019 argument. Parameters: Name Type Description Default conf NanopubConf config for the nanopub required uri str The uri pointing to the to-be-retracted nanopublication required force bool Toggle using force to retract, this will even retract the nanopublication if it is signed with a different public key than the one in the user profile. False Source code in nanopub/templates/nanopub_retract.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class NanopubRetract ( Nanopub ): \"\"\"Retract a nanopublication. Publish a retraction nanpublication that declares retraction of the nanopublication that corresponds to the 'uri' argument. Args: conf: config for the nanopub uri (str): The uri pointing to the to-be-retracted nanopublication force (bool): Toggle using force to retract, this will even retract the nanopublication if it is signed with a different public key than the one in the user profile. \"\"\" def __init__ ( self , conf : NanopubConf , uri : str , force : bool = False , ) -> None : conf = deepcopy ( conf ) conf . add_prov_generated_time = True conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True conf . attribute_assertion_to_profile = True super () . __init__ ( conf = conf , ) if not self . profile : raise ProfileError ( \"No profile provided, cannot generate a Nanopub to retract another nanopub\" ) if not force : self . _check_public_keys_match ( uri ) orcid_id = self . profile . orcid_id self . assertion . add ( ( URIRef ( orcid_id ), NPX . retracts , URIRef ( uri )) ) def _check_public_keys_match ( self , uri ): \"\"\"Check for matching public keys of a nanopublication with the profile. Raises: AssertionError: When the nanopublication is signed with a public key that does not match the public key in the profile \"\"\" np = Nanopub ( uri , conf = NanopubConf ( use_test_server = self . _conf . use_test_server , use_server = self . _conf . use_server , ) ) if np . metadata . public_key is None : raise MalformedNanopubError ( f \"Public key not found in the nanopub { np . source_uri } \" ) if self . _conf . profile . public_key is None : raise ValueError ( f \"Public key not found for profile { self . _conf . profile . orcid_id } \" ) if np . metadata . public_key != self . _conf . profile . public_key is None : raise AssertionError ( \"The public key in your profile does not match the public key\" \"that the publication that you want to retract is signed with.\" )","title":"NanopubRetract"},{"location":"reference/templates/#nanopub.templates.nanopub_index.NanopubIndex","text":"Bases: Nanopub Publish a list of nanopub URIs in a Nanopub Index Parameters: Name Type Description Default conf NanopubConf config for the nanopub required np_list Union [ List [ str ], List [ Nanopub ]] List of nanopub URIs required title str Title of the Nanopub Index required description str Description of the Nanopub Index required creation_time str Creation time of the Nanopub Index, in format YYYY-MM-DDThh-mm-ss required creators List [ str ] List of the ORCID of the creators of the Nanopub Index required see_also str A URL to a page with further information on the Nanopub Index None Source code in nanopub/templates/nanopub_index.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class NanopubIndex ( Nanopub ): \"\"\"Publish a list of nanopub URIs in a Nanopub Index Args: conf: config for the nanopub np_list: List of nanopub URIs title: Title of the Nanopub Index description: Description of the Nanopub Index creation_time: Creation time of the Nanopub Index, in format YYYY-MM-DDThh-mm-ss creators: List of the ORCID of the creators of the Nanopub Index see_also: A URL to a page with further information on the Nanopub Index \"\"\" def __init__ ( self , conf : NanopubConf , np_list : Union [ List [ str ], List [ Nanopub ]], title : str , description : str , creation_time : str , creators : List [ str ], see_also : str = None , top_level : bool = False , ) -> None : conf = deepcopy ( conf ) conf . add_prov_generated_time = False conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True super () . __init__ ( conf = conf , ) for np in np_list : if isinstance ( np , Nanopub ): np_uri = np . source_uri else : np_uri = np if top_level : self . assertion . add (( DUMMY_URI , NPX . appendsIndex , URIRef ( np_uri ))) else : self . assertion . add (( DUMMY_URI , NPX . includesElement , URIRef ( np_uri ))) self . pubinfo . add (( DUMMY_URI , RDF . type , NPX . NanopubIndex )) self . pubinfo . add (( DUMMY_URI , DC . title , Literal ( title ))) self . pubinfo . add (( DUMMY_URI , DC . description , Literal ( description ))) if see_also : self . pubinfo . add (( DUMMY_URI , RDFS . seeAlso , URIRef ( see_also ))) for creator in creators : self . pubinfo . add (( DUMMY_URI , PAV . createdBy , URIRef ( creator ))) # TODO: use current time if not provided # datetime.datetime.now().astimezone().replace(microsecond=0).isoformat() ? self . pubinfo . add ( ( DUMMY_URI , DCTERMS . created , Literal ( creation_time , datatype = XSD . dateTime , normalize = False ), ) ) self . provenance . add (( DUMMY_NAMESPACE . assertion , RDF . type , NPX . IndexAssertion ))","title":"NanopubIndex"},{"location":"reference/templates/#nanopub.templates.nanopub_index.create_nanopub_index","text":"Create a Nanopub index. Publish a list of nanopub URIs in a Nanopub Index Parameters: Name Type Description Default np_list Union [ List [ str ], List [ Nanopub ]] List of nanopub URIs required title str Title of the Nanopub Index required description str Description of the Nanopub Index required creation_time str Creation time of the Nanopub Index, in format YYYY-MM-DDThh-mm-ss required creators List [ str ] List of the ORCID of the creators of the Nanopub Index required see_also str A URL to a page with further information on the Nanopub Index None Source code in nanopub/templates/nanopub_index.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def create_nanopub_index ( conf : NanopubConf , np_list : Union [ List [ str ], List [ Nanopub ]], title : str , description : str , creation_time : str , creators : List [ str ], see_also : str = None , ) -> List [ Nanopub ]: \"\"\"Create a Nanopub index. Publish a list of nanopub URIs in a Nanopub Index Args: np_list: List of nanopub URIs title: Title of the Nanopub Index description: Description of the Nanopub Index creation_time: Creation time of the Nanopub Index, in format YYYY-MM-DDThh-mm-ss creators: List of the ORCID of the creators of the Nanopub Index see_also: A URL to a page with further information on the Nanopub Index \"\"\" pub_list : List [ Nanopub ] = [] for i in range ( 0 , len ( np_list ), MAX_NP_PER_INDEX ): np_chunk = np_list [ i : i + MAX_NP_PER_INDEX ] pub = NanopubIndex ( conf , np_chunk , title , description , creation_time , creators , see_also , top_level = False ) pub . sign () log . info ( f \"Signed Nanopub Index: { pub . source_uri } \" ) pub_list . append ( pub ) if len ( pub_list ) > 1 : toplevel_pub = NanopubIndex ( conf , pub_list , title , description , creation_time , creators , see_also , top_level = True ) toplevel_pub . sign () log . info ( f \"Signed top level Nanopub Index: { toplevel_pub . source_uri } \" ) pub_list . append ( toplevel_pub ) return pub_list","title":"create_nanopub_index()"},{"location":"reference/templates/#nanopub.templates.nanopub_introduction.NanopubIntroduction","text":"Bases: Nanopub Publish a Nanopub introduction to introduce a key pair for an ORCID Parameters: Name Type Description Default conf NanopubConf config for the nanopub required host Optional [ str ] the service where the keypair are hosted None Source code in nanopub/templates/nanopub_introduction.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 class NanopubIntroduction ( Nanopub ): \"\"\"Publish a Nanopub introduction to introduce a key pair for an ORCID Args: conf: config for the nanopub host: the service where the keypair are hosted \"\"\" def __init__ ( self , conf : NanopubConf , host : Optional [ str ] = None , ) -> None : conf = deepcopy ( conf ) conf . add_prov_generated_time = False conf . add_pubinfo_generated_time = True conf . attribute_publication_to_profile = True conf . attribute_assertion_to_profile = True super () . __init__ ( conf = conf , ) if not self . profile : raise ProfileError ( \"No profile provided, cannot generate a Nanopub Introduction\" ) key_declaration = self . _metadata . namespace . keyDeclaration orcid_node = URIRef ( self . conf . profile . orcid_id ) self . assertion . add (( key_declaration , NPX . declaredBy , orcid_node )) self . assertion . add (( key_declaration , NPX . hasAlgorithm , Literal ( \"RSA\" ))) self . assertion . add (( key_declaration , NPX . hasPublicKey , Literal ( self . conf . profile . public_key ))) self . assertion . add (( orcid_node , FOAF . name , Literal ( self . conf . profile . name ))) if host : self . assertion . add (( key_declaration , NPX . hasKeyLocation , URIRef ( host )))","title":"NanopubIntroduction"},{"location":"searching/fetching/","text":"Fetching nanopublications Fetch from the default server You can fetch nanopublications from the default nanopub server using the Nanopub class. from nanopub import Nanopub # Fetch the nanopublication at the specified URI np = Nanopub ( 'http://purl.org/np/RApJG4fwj0szOMBMiYGmYvd5MCtRle6VbwkMJUb1SxxDM' ) # Print the RDF contents of the nanopublication print ( np ) # Iterate through all triples in the assertion graph for s , p , o in np . assertion : print ( s , p , o ) # Iterate through the publication info for s , p , o in np . pubinfo : print ( s , p , o ) # Iterate through the provenance graph for s , p , o in np . provenance : print ( s , p , o ) # See the concept that is introduced by this nanopublication (if any) print ( np . introduces_concept ) Fetch from a specific server You can fetch Nanopubs from the test server: from nanopub import Nanopub np = Nanopub ( source_uri = 'http://purl.org/np/RANGY8fx_EYVeZzJOinH9FoY-WrQBerKKUy2J9RCDWH6U' , conf = NanopubConf ( use_test_server = True ) ) print ( np ) Or from a specific nanopub server: np = Nanopub ( source_uri = 'http://purl.org/np/RApJG4fwj0szOMBMiYGmYvd5MCtRle6VbwkMJUb1SxxDM' , conf = NanopubConf ( use_server = 'https://np.petapico.org' ) ) print ( np )","title":"Fetching"},{"location":"searching/fetching/#fetching-nanopublications","text":"","title":"Fetching nanopublications"},{"location":"searching/fetching/#fetch-from-the-default-server","text":"You can fetch nanopublications from the default nanopub server using the Nanopub class. from nanopub import Nanopub # Fetch the nanopublication at the specified URI np = Nanopub ( 'http://purl.org/np/RApJG4fwj0szOMBMiYGmYvd5MCtRle6VbwkMJUb1SxxDM' ) # Print the RDF contents of the nanopublication print ( np ) # Iterate through all triples in the assertion graph for s , p , o in np . assertion : print ( s , p , o ) # Iterate through the publication info for s , p , o in np . pubinfo : print ( s , p , o ) # Iterate through the provenance graph for s , p , o in np . provenance : print ( s , p , o ) # See the concept that is introduced by this nanopublication (if any) print ( np . introduces_concept )","title":"Fetch from the default server"},{"location":"searching/fetching/#fetch-from-a-specific-server","text":"You can fetch Nanopubs from the test server: from nanopub import Nanopub np = Nanopub ( source_uri = 'http://purl.org/np/RANGY8fx_EYVeZzJOinH9FoY-WrQBerKKUy2J9RCDWH6U' , conf = NanopubConf ( use_test_server = True ) ) print ( np ) Or from a specific nanopub server: np = Nanopub ( source_uri = 'http://purl.org/np/RApJG4fwj0szOMBMiYGmYvd5MCtRle6VbwkMJUb1SxxDM' , conf = NanopubConf ( use_server = 'https://np.petapico.org' ) ) print ( np )","title":"Fetch from a specific server"},{"location":"searching/searching/","text":"Searching the nanopub server The NanopubClient provides methods for searching the nanopub server. It provides an (incomplete) mapping to the nanopub server grlc endpoint . Text search Search for all nanopublications containing some text using NanopubClient.find_nanopubs_with_text() from nanopub import NanopubClient client = NanopubClient () results = client . find_nanopubs_with_text ( 'fair' ) Triple pattern search Search for nanopublications whose assertions contain triples that match a specific pattern. from nanopub import NanopubClient client = NanopubClient () # Search for nanopublications whose assertions contain triples that are ```rdf:Statement```s. results = client . find_nanopubs_with_pattern ( pred = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' , obj = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement' ) Search on introduced concept Search for any nanopublications that introduce a concept of the given type, that contain text with the given search term. from nanopub import NanopubClient client = NanopubClient () # Search for nanopublications that introduce a concept that is a ```p-plan:Step```. results = client . find_things ( 'http://purl.org/net/p-plan#Step' ) Interpreting search results Each search method returns a generator of dicts depicting matching nanopublications. Each dict has the following key-value pairs: * date : The date and time the nanopublication was created. * description : A description of the nanopublication that was parsed from the nanopublication RDF. * np : The URI of the matching nanopublication. Example results (from NanopubClient.find_nanopubs_with_text('fair') ): print ( list ( results )) [{ 'date' : '2020-05-01T08:05:25.575Z' , 'description' : 'The primary objective of the VODAN Implementation Network is ' 'to showcase the creation and deployment of FAIR data related ' 'to COVID-19' , 'np' : 'http://purl.org/np/RAdDKjIGPt_2mE9oJtB3YQX6wGGdCC8ZWpkxEIoHsxOjE' }, { 'date' : '2020-05-14T09:34:53.554Z' , 'description' : 'FAIR IN community' , 'np' : 'http://purl.org/np/RAPE0A-NrIZDeX3pvFJr0uHshocfXuUj8n_J3BkY0sMuU' }] Returning retracted publications in search By default nanopublications that have a valid retraction do not show up in search results. A valid retraction is a retraction that is signed with the same public key as the nanopublication that it retracts. You can toggle this behavior with the filter_retracted parameter, here is an example with NanopubClient.find_nanopubs_with_text : from nanopub import NanopubClient client = NanopubClient () # Search for nanopublications containing the text fair, also returning retracted publications. results = client . find_nanopubs_with_text ( 'fair' , filter_retracted = False ) Filtering search results for a particular publication key You can filter search results to publications that are signed with a specific publication key (effectively filtering on publications from a single author). You use the pubkey argument for that. Here is an example with NanopubClient.find_nanopubs_with_text : from nanopub import NanopubClient , profile # Search for nanopublications containing the text 'test', # filtering on publications signed with my publication key. client = NanopubClient ( use_test_server = True ) my_public_key = profile . public_key results = client . find_nanopubs_with_text ( 'test' , pubkey = my_public_key )","title":"Searching"},{"location":"searching/searching/#searching-the-nanopub-server","text":"The NanopubClient provides methods for searching the nanopub server. It provides an (incomplete) mapping to the nanopub server grlc endpoint .","title":"Searching the nanopub server"},{"location":"searching/searching/#text-search","text":"Search for all nanopublications containing some text using NanopubClient.find_nanopubs_with_text() from nanopub import NanopubClient client = NanopubClient () results = client . find_nanopubs_with_text ( 'fair' )","title":"Text search"},{"location":"searching/searching/#triple-pattern-search","text":"Search for nanopublications whose assertions contain triples that match a specific pattern. from nanopub import NanopubClient client = NanopubClient () # Search for nanopublications whose assertions contain triples that are ```rdf:Statement```s. results = client . find_nanopubs_with_pattern ( pred = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' , obj = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement' )","title":"Triple pattern search"},{"location":"searching/searching/#search-on-introduced-concept","text":"Search for any nanopublications that introduce a concept of the given type, that contain text with the given search term. from nanopub import NanopubClient client = NanopubClient () # Search for nanopublications that introduce a concept that is a ```p-plan:Step```. results = client . find_things ( 'http://purl.org/net/p-plan#Step' )","title":"Search on introduced concept"},{"location":"searching/searching/#interpreting-search-results","text":"Each search method returns a generator of dicts depicting matching nanopublications. Each dict has the following key-value pairs: * date : The date and time the nanopublication was created. * description : A description of the nanopublication that was parsed from the nanopublication RDF. * np : The URI of the matching nanopublication. Example results (from NanopubClient.find_nanopubs_with_text('fair') ): print ( list ( results )) [{ 'date' : '2020-05-01T08:05:25.575Z' , 'description' : 'The primary objective of the VODAN Implementation Network is ' 'to showcase the creation and deployment of FAIR data related ' 'to COVID-19' , 'np' : 'http://purl.org/np/RAdDKjIGPt_2mE9oJtB3YQX6wGGdCC8ZWpkxEIoHsxOjE' }, { 'date' : '2020-05-14T09:34:53.554Z' , 'description' : 'FAIR IN community' , 'np' : 'http://purl.org/np/RAPE0A-NrIZDeX3pvFJr0uHshocfXuUj8n_J3BkY0sMuU' }]","title":"Interpreting search results"},{"location":"searching/searching/#returning-retracted-publications-in-search","text":"By default nanopublications that have a valid retraction do not show up in search results. A valid retraction is a retraction that is signed with the same public key as the nanopublication that it retracts. You can toggle this behavior with the filter_retracted parameter, here is an example with NanopubClient.find_nanopubs_with_text : from nanopub import NanopubClient client = NanopubClient () # Search for nanopublications containing the text fair, also returning retracted publications. results = client . find_nanopubs_with_text ( 'fair' , filter_retracted = False )","title":"Returning retracted publications in search"},{"location":"searching/searching/#filtering-search-results-for-a-particular-publication-key","text":"You can filter search results to publications that are signed with a specific publication key (effectively filtering on publications from a single author). You use the pubkey argument for that. Here is an example with NanopubClient.find_nanopubs_with_text : from nanopub import NanopubClient , profile # Search for nanopublications containing the text 'test', # filtering on publications signed with my publication key. client = NanopubClient ( use_test_server = True ) my_public_key = profile . public_key results = client . find_nanopubs_with_text ( 'test' , pubkey = my_public_key )","title":"Filtering search results for a particular publication key"}]}